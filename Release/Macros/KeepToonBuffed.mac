|---------------------------------------------------------------------------------
|
|  KeepToonBuffed.mac by TreeHuginDruid -- Last Edited 5/16/2017
|
|   This macro is designed to allow an out of group PowerLeveling toon
|   to be able to target members of a low level group, heal, 
|   and maintain buffs on them.
|
|  --- Credit goes out to Maskoi as well, for providing the CreateIni and LoadInI code -
|  --- (Ripped from ShamBot)
|
|---------------------------------------------------------------------------------

#turbo 80

#Event SpellBlocked "#*#Your #1# spell did not take hold on #2#. (Blocked by #3#.)#*#"
#Event SpellBlocked "#*#Your #1# spell did not take hold on #2#.#*#"

|---------------------------------------------------------------------------------
Sub Main

|---------------------------------------------------------------------------------
| ---- Turn off melee functions and turn on "Target Group Buff" setting ----------
/if (${Bool[${Plugin[MQ2Melee]}]}) /squelch /melee melee=0
/tgb on
|---------------------------------------------------------------------------------

|==================== DO NOT ALTER THESE VALUES ====================
/declare MacroName		string	outer	KeepToonBuffed
/declare KeepToonBuffVer	string	outer	1.8.1
/declare IniFileName		string	outer	${MacroName}_${Me.CleanName}.ini
/call CreateIni

| ################## Set up [General] values
/call LoadIni General MacroVer			string	${KeepToonBuffVer}
/call LoadIni General AutoAnnounce		bool	FALSE
/call LoadIni General Debug			bool	TRUE
/call LoadIni General AdminDebug		bool	FALSE
/call LoadIni General DebugINI			bool	FALSE
/call LoadIni General FollowGroup		int		0
/call LoadIni General FollowDist		int		30
/declare MyMDist 				int 	outer	${FollowDist}-5
/call LoadIni General SpellSetName		string	NULL

| ################## Set up [Mana] values
/call LoadIni Mana MinManaPct			int	20
/call LoadIni Mana MinManaMedPct		int	100

| ################## Set up [Heal] values
/call LoadIni Heal HealsOn			int	1
/call LoadIni Heal HealSpell			string	NULL
/call LoadIni Heal HealPct			int	60
/declare HealSpellRange 			int 	outer 	${Spell[${HealSpell}].Range}

| ################## Set up [Toons] values
/call LoadIni Toons NumberOfToons		int	6
/declare MyBuffTargetName[${NumberOfToons}]	string	outer 
/call LoadIni Toons MyBuffTargetName		string	NULL	MyBuffTargetName

| ################## Set up [Buffs] values
/call LoadIni Buffs BuffsOn			int	1
/call LoadIni Buffs NumberOfBuffs		int	5
/declare TargetBuffName[${NumberOfBuffs}]	string	outer
/call LoadIni Buffs TargetBuffName		string	NULL	TargetBuffName

/call VersionControl
/call CheckPlugin MQ2Cast
/call CheckPlugin MQ2Moveutils
|==================== DO NOT ALTER THESE VALUES ====================

|---------------------------------------------------------------------------------
/echo
/echo KeepToonBuffed.mac - Version: ${MacroVer} by TreeHuginDruid
/echo 
|---------------------------------------------------------------------------------

|---------------------------------------------------------------------------------
/if (${Defined[SpellSetName]} || ${SpellSetName.NotEqual[null]}) {
    /echo Memming spellset (${SpellSetName}).
    /memspellset ${SpellSetName}
	/delay 5s
}   
|---------------------------------------------------------------------------------

:loop 

    /if (${HealsOn})  /call CheckMyHealth
    /if (${HealsOn})  /call CheckTargetHealth
    /if (${BuffsOn})  /call MaintainTargetBuffs 
    /if (${Me.PctMana}<=${MinManaPct} && !${Me.CombatState.Equal[COMBAT]}) /call CheckMana
    /if (${FollowGroup}) /call FollowAround
    |Internal second delay to allow for manual moving, prevents constant sit loop if only 1 toon being buffed.
    /delay 10
    /if (${Me.Standing} && !${Me.Casting.ID} && !${Me.CombatState.Equal[COMBAT]} && !${Me.Moving} && !${Me.Mount.ID}) /sit 
  
/goto :loop

/return
|---------------------------------------------------------------------------------

|---------------------------------------------------------------------------------
| SUB: Version Control
|---------------------------------------------------------------------------------
Sub VersionControl

/if (${MacroVer.NotEqual[${KeepToonBuffVer}]}) {
    /echo Version mismatch detected, please wait until this is corrected.
    /ini "${IniFileName}" "General" "MacroVer" "${KeepToonBuffVer}"
    /echo Version information updated.
    /call LoadIni General MacroVer	string	${KeepToonBuffVer}
}

/return
|---------------------------------------------------------------------------------

|---------------------------------------------------------------------------------
| SUB: Check Plugin
|---------------------------------------------------------------------------------
Sub CheckPlugin(string pluginname)

/if (!${Bool[${Plugin[${pluginname}]}]}) {
    /squelch /plugin ${pluginname}
    /echo ${pluginname} not detected! This macro requires it! Loading ...
}
    
/return
|---------------------------------------------------------------------------------

|---------------------------------------------------------------------------------
| SUB: CreateIni
|---------------------------------------------------------------------------------
Sub CreateIni

/if (${Ini[${IniFileName}].Length}) /return
/declare a local General|Mana|Heal|Toons|Buffs|
/echo Creating ini file ${IniFileName}
/declare i int local 1
/for i 1 to 5
/ini ${IniFileName} "${a.Arg[${i},|]}" "|===================================" "==================================|"
/next i
/echo Please edit your ini file ${IniFileName} and restart Shambot

/return
|---------------------------------------------------------------------------------

|---------------------------------------------------------------------------------
| SUB: Load Ini
|---------------------------------------------------------------------------------
Sub LoadIni(string sectionName, string varName, string varType, string varValue, string varArray, string FileName)
   
   | Assign ini name to default ini if not defined
    /if (${FileName.Length}==0) {
        /declare FileName string local
        /varset FileName ${IniFileName}
    }
    /if (${DebugINI}) {
	/echo DEBUG LoadIni: enter
	/delay 2
	/echo \atDebugINI Sub Loadini sectionName=(${sectionName}) varName=(${varName}) varType=(${varType}) varValue=(${varValue}) varArray=(${varArray}) FileName=(${FileName}) \agLine#: ${Macro.CurLine}
    }
    | Check if ini value is asking for an array ie buff1 to buff20
    /if (${${varArray}.Size}>0) {
        /declare i int local
        /for i 1 to ${${varArray}.Size}	
        /if (!${Ini[${FileName},${sectionName},${varArray}${i}].Length}) {
            /if (${DebugINI}) /echo /ini "${FileName}" "${sectionName}" "${varArray}${i}" "${varValue}" ***
            /ini "${FileName}" "${sectionName}" "${varArray}${i}" "${varValue}"
        }                                        
        /if (${Ini[${FileName},${sectionName},${varArray}${i}].Length}) {
            /if (${DebugINI}) /echo /varset ${varArray}[${i}] ${Ini[${FileName},${sectionName},${varArray}${i}]} ***
            /varset ${varArray}[${i}] ${Ini[${FileName},${sectionName},${varArray}${i}]}
        }                    
        /next i
    /return
    } else {
        /if (!${Defined[${varName}]} && ${Defined[varType]}) /declare ${varName} ${varType} outer
        /if (!${Ini[${FileName},${sectionName},${varName}].Length}) {
            /if (${varValue.Length}) {
                /ini "${FileName}" "${sectionName}" "${varName}" "${varValue}"
                /varset ${varName} ${varValue}
                /if (${Debug}) /echo \atDEBUG Sub Loadini /varset ${varName} ${varValue} \agLine#: ${Macro.CurLine}
            }
        } else {
            /varset ${varName} ${Ini[${FileName},${sectionName},${varName}]}
        }
    /if (${DebugINI}) /echo DEBUG LoadIni: leave
    /return
|--------------------------------------------------------------------------------- 

|-------------------------------------------------------------------------------- 
| SUB: Check My Health
|-------------------------------------------------------------------------------- 
Sub CheckMyHealth

/if (${Me.PctHPs}<=${HealPct}) {
    /if (${Target.ID}!=${Me.ID}) {
         /if (${Debug}) /echo Attempting to target (${Me.CleanName}) for heals!
         /squelch /target id ${Me.ID} pc targetable
         /delay 15
         /casting "${HealSpell}" gem8
         /call CheckCasting
         /call CheckGlobalCooldown
    }
}

/return
|---------------------------------------------------------------------------------

|-------------------------------------------------------------------------------- 
| SUB: Check Target Health
|-------------------------------------------------------------------------------- 
Sub CheckTargetHealth

/declare i int inner

/for i 1 to ${NumberOfToons}

    /if (${Target.ID}!=${Spawn[=${MyBuffTargetName[${i}]}].ID} && ${MyBuffTargetName[${i}].NotEqual[null]}) {	
        /if (${Debug}) /echo Attempting to target (${MyBuffTargetName[${i}]}) for health check.
        /squelch /target id ${Spawn[=${MyBuffTargetName[${i}]}].ID} pc targetable
        /delay 15
        /if (${Target.ID}!=${Spawn[=${MyBuffTargetName[${i}]}].ID} || !${Target.Type.Equal[pc]}) /next i
        /if ((${Target.PctHPs}<=${HealPct}) && (${Target.Distance}<=${HealSpellRange})) {
		
            |--------------------------------------------------------------------------------
            |  ADMIN DEBUG FOR HEAL CODE
            |--------------------------------------------------------------------------------        
            /if (${AdminDebug}) {
                /echo -----------
                /if ((${Target.PctHPs}<=${HealPct}) && (${Target.Distance}<=${HealSpellRange}) && (${Target.Distance}<=${Spell[${HealSpell}].Range} || ${Target.Distance}<=${Spell[${HealSpell}].AERange})) {
                    /echo PC:${Target.Type.Equal[pc]} HEAL:${HealSpell} MANA:(${Me.CurrentMana}>${Spell[${HealSpell}].Mana}) INRANGE:(${Target.Distance}<=${Spell[${HealSpell}].Range} || ${Target.Distance}<=${Spell[${HealSpell}].AERange})
                    /echo "${TargetBuffName[${i}]}" = Heal Should Cast
                } else {
                    /echo PC:${Target.Type.Equal[pc]} HEAL:${HealSpell} MANA:(${Me.CurrentMana}>${Spell[${HealSpell}].Mana}) INRANGE:(${Target.Distance}<=${Spell[${HealSpell}].Range} || ${Target.Distance}<=${Spell[${HealSpell}].AERange})
                    /echo "${TargetBuffName[${i}]}" = Heal will NOT Cast  
                    /echo -----------
                    /delay 5s
                }
            }
            |--------------------------------------------------------------------------------

            /if (${Debug}) /echo ${MyBuffTargetName[${i}]}'s health at (${Target.PctHPs}), HEAL TIME !!!!
            /casting "${HealSpell}" gem8
            /call CheckCasting
            /call CheckGlobalCooldown
        }
    }
/next i

/return
|---------------------------------------------------------------------------------

|-------------------------------------------------------------------------------- 
| SUB: Maintain Target buffs
|-------------------------------------------------------------------------------- 
Sub MaintainTargetBuffs

/declare i int inner
/declare j int inner

/for j 1 to ${NumberOfToons}
    /if (${Target.ID}!=${Spawn[=${MyBuffTargetName[${j}]}].ID} && ${MyBuffTargetName[${j}].NotEqual[null]}) {
         /if (${Debug}) /echo Attempting to target (${MyBuffTargetName[${j}]}) for buffs.
         /squelch /target id ${Spawn[=${MyBuffTargetName[${j}]}].ID} pc targetable
         /delay 15
         /if (${Target.ID}!=${Spawn[=${MyBuffTargetName[${j}]}].ID} || !${Target.Type.Equal[pc]}) /next j
    }
 
    /for i 1 to ${NumberOfBuffs}         
        /if (!${Target.Buff[${TargetBuffName[${i}]}].ID} && ${Target.Type.Equal[pc]} && (${Me.CurrentMana}>${Spell[${TargetBuffName[${i}]}].Mana}) && ${Spell[${TargetBuffName[${i}]}].Stacks} && (${Target.Distance}<=${Spell[${TargetBuffName[${i}]}].Range} || ${Target.Distance}<=${Spell[${TargetBuffName[${i}]}].AERange}) && !${Target.Buff[Resurrection Sickness].ID} && !${Target.Buff[Revival Sickness].ID}) {
             
            |--------------------------------------------------------------------------------
            |  ADMIN DEBUG FOR BUFF CODE
            |--------------------------------------------------------------------------------        
            /if (${AdminDebug}) {
                /echo -----------
                /if (!${Target.Buff[${TargetBuffName[${i}]}].ID} && ${Target.Type.Equal[pc]} && (${Me.CurrentMana}>${Spell[${TargetBuffName[${i}]}].Mana}) && ${Spell[${TargetBuffName[${i}]}].Stacks} && (${Target.Distance}<=${Spell[${TargetBuffName[${i}]}].Range} || ${Target.Distance}<=${Spell[${TargetBuffName[${i}]}].AERange}) && !${Target.Buff[Resurrection Sickness].ID} && !${Target.Buff[Revival Sickness].ID}) {
                    /echo PC:${Target.Type.Equal[pc]} BUFF:!${Target.Buff[${TargetBuffName[${i}]}].ID} MANA:(${Me.CurrentMana}>${Spell[${TargetBuffName[${i}]}].Mana}) STACKS:${Spell[${TargetBuffName[${i}]}].Stacks} INRANGE:(${Target.Distance}<=${Spell[${TargetBuffName[${i}]}].Range} || ${Target.Distance}<=${Spell[${TargetBuffName[${i}]}].AERange}) RezSick:!${Target.Buff[Resurrection Sickness].ID} RevivSick:!${Target.Buff[Revival Sickness].ID}
                    /echo "${TargetBuffName[${i}]}" = Buff is Needed
                } else {
                    /echo PC:${Target.Type.Equal[pc]} BUFF:!${Target.Buff[${TargetBuffName[${i}]}].ID} MANA:(${Me.CurrentMana}>${Spell[${TargetBuffName[${i}]}].Mana}) STACKS:${Spell[${TargetBuffName[${i}]}].Stacks} INRANGE:(${Target.Distance}<=${Spell[${TargetBuffName[${i}]}].Range} || ${Target.Distance}<=${Spell[${TargetBuffName[${i}]}].AERange}) RezSick:!${Target.Buff[Resurrection Sickness].ID} RevivSick:!${Target.Buff[Revival Sickness].ID}
                    /echo "${TargetBuffName[${i}]}" = Buff is NOT Needed             
                    /echo -----------
                    /delay 5s
                }
            }
            |--------------------------------------------------------------------------------			 
			 		 
	     /if (${Debug}) /echo Attempting to cast (${TargetBuffName[${i}]}) on (${MyBuffTargetName[${j}]}).
             /casting "${TargetBuffName[${i}]}" gem8             
             /call CheckCasting
             /call CheckGlobalCooldown
	     /doevents
        }
    /next i
    
/next j
 
/return
|---------------------------------------------------------------------------------

|--------------------------------------------------------------------------------- 
| SUB: Check Mana
|---------------------------------------------------------------------------------
Sub CheckMana

/if (${Select[${Me.Class.ShortName},BRD]}) /return

/echo Checking my Mana . . .

/if (${Me.PctMana}<${MinManaMedPct}) { 
     /echo I'm low on mana (${Me.PctMana}%), medding to (${MinManaMedPct}%).
     /if (${AutoAnnounce}) /tell ${MyBuffTargetName[1]} I'm low on mana, medding to full.      

     /if (${Me.Standing} && !${Me.Mount.ID}) /sit 

    :KeepMeddingForMana
    /if (!${Me.CombatState.Equal[COMBAT]} && (${Me.PctMana}<${MinManaMedPct})) {
        /echo Mana now at (${Me.PctMana}%) ...
        /if (${Me.AltAbilityReady[Cannibalization]}) /call Cast "Cannibalization" alt  	 	
        /if (${HealsOn})  /call CheckMyHealth
        /if (${HealsOn})  /call CheckTargetHealth
        /if (${BuffsOn})  /call MaintainTargetBuffs 
	/if (${FollowGroup}) /call FollowAround
        /delay 6s
        /doevents        
        /if (${Me.Standing} && !${Me.Mount.ID}) /sit
        /goto :KeepMeddingForMana
    } else {
        /if (${Me.Sitting} && !${Me.Mount.ID}) /stand
    }
     
    /echo Mana check done . . .
    /if (${AutoAnnounce}) /tell ${MyBuffTargetName[1]} Done medding!
}
 
/return
|---------------------------------------------------------------------------------

|---------------------------------------------------------------------------------
| SUB: Follow Around
|---------------------------------------------------------------------------------
Sub FollowAround

/if (${Target.ID}!=${Spawn[=${MyBuffTargetName[1]}].ID} && ${MyBuffTargetName[1].NotEqual[null]}) {
     /squelch /target id ${Spawn[=${MyBuffTargetName[1]}].ID} pc targetable
     /delay 15
} 

/if (${Target.Distance} > ${FollowDist}) {
     /echo *** Moving closer to (${MyBuffTargetName[1]}). ***
     /if (${Me.Sitting} && !${Me.Mount.ID}) /stand
     /moveto id ${Spawn[=${MyBuffTargetName[1]}].ID} mdist ${MyMDist}	
}

/return
|---------------------------------------------------------------------------------

|---------------------------------------------------------------------------------
| SUB: Check Casting
|---------------------------------------------------------------------------------
Sub CheckCasting

/if (${Me.Casting.ID}) {
    /echo *** Waiting to finish casting. ***
    :WaitForCasting
    /delay 5
    /if (${Me.Casting.ID}) /goto :WaitForCasting
}

/return
|---------------------------------------------------------------------------------

|---------------------------------------------------------------------------------
| SUB: Check Global Cooldown
|---------------------------------------------------------------------------------
Sub CheckGlobalCooldown

/if (${Me.SpellInCooldown}) {
    /echo *** Waiting on global spell cool down. ***
    :WaitForCooldown
    /delay 5
    /if (${Me.SpellInCooldown}) /goto :WaitForCooldown
}

/return
|---------------------------------------------------------------------------------

|---------------------------------------------------------------------------------
| SUB: Event_SpellBlocked
|---------------------------------------------------------------------------------
Sub Event_SpellBlocked(string line, string MySPell, string BuffToon, string BlockingSPell)

/if (${Defined[${BlockingSPell}]}) {
    /echo Your ${MySPell} spell did not take hold on ${BuffToon} (Blocked by ${BlockingSPell}.)
} else {
    /echo Your ${MySPell} spell did not take hold on ${BuffToon} (Perhaps he/she is max buffed?)
}
/beep
/echo You are wasting mana in a casting loop!
    
/return
|---------------------------------------------------------------------------------