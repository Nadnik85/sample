|---------------------------------------------------------------------------------
|
|  BuffNBurn.mac by jackstraw01(mq2war) -- Last Edited 6/20/2017
|
|   This macro is designed to allow an out of group PowerLeveling toon
|   to be able to target members of a low level group, heal, 
|   and maintain buffs on them.


|  --- Base code was KeepToonBuffed by TreeHuginDruid.
|  --- Credit goes out to Maskoi as well, for providing the CreateIni and LoadInI code -
|  --- (Ripped from ShamBot)
|
|---------------------------------------------------------------------------------

#turbo 80
#include KeepToonBuffed.inc
#Event SpellBlocked "#*#Your #1# spell did not take hold on #2#. (Blocked by #3#.)#*#"
#Event SpellBlocked "#*#Your #1# spell did not take hold on #2#.#*#"

|---------------------------------------------------------------------------------
Sub Main

|---------------------------------------------------------------------------------
| ---- Turn off melee functions and turn on "Target Group Buff" setting ----------
/if (${Bool[${Plugin[MQ2Melee]}]}) /squelch /melee off
/tgb on
/squelch /target clear
|---------------------------------------------------------------------------------

|==================== DO NOT ALTER THESE VALUES ====================
/declare MacroName		string	outer	KeepToonBuffed
/declare KeepToonBuffVer	string	outer	1.9.9
/declare IniFileName		string	outer	${MacroName}_${Me.CleanName}.ini
/call CreateIni

| ################## Set up [General] values
/call LoadIni General MacroVer			string	${KeepToonBuffVer}
/call LoadIni General AutoAnnounce		bool	FALSE
/call LoadIni General Debug			bool	TRUE
/call LoadIni General AdminDebug		bool	FALSE
/call LoadIni General DebugINI			bool	FALSE
/call LoadIni General FollowGroup		int	0
/call LoadIni General FollowDist		int	30
/declare MyMDist 				int 	outer	${FollowDist}-5
/call LoadIni General SpellSetName		string	NULL

| ################## Set up [Mana] values
/call LoadIni Mana MinManaPct			int	20
/call LoadIni Mana MinManaMedPct		int	100

| ################## Set up [Heal] values
/call LoadIni Heal HealsOn			int	1
/call LoadIni Heal HealSpell			string	NULL
/call LoadIni Heal HealPct			int	60
/declare HealSpellRange 			int 	outer 	${Spell[${HealSpell}].Range}

| ################## Set up [Toons] values
/call LoadIni Toons NumberOfToons		int	6
/declare MyBuffTargetName[${NumberOfToons}]	string	outer 
/call LoadIni Toons MyBuffTargetName		string	NULL	MyBuffTargetName

| ################## Set up [Buffs] values
/call LoadIni Buffs BuffsOn			int	1
/call LoadIni Buffs NumberOfBuffs		int	5
/call LoadIni Buffs TargetBuffNameHelp 		string 	"Name of Spell to Cast|Name of Buff Effect in Buff Window"
/declare TargetBuffName[${NumberOfBuffs}]	string	outer
/call LoadIni Buffs TargetBuffName		string	NULL	TargetBuffName

| ################## Set up [Assist] values
/call LoadIni Assist AssistOn			int	0
/call LoadIni Assist NumberOfSpells		int	5
/call LoadIni Assist AssistSpellHelp 		string 	"To be used for NON damage ROOT or SNARE spells ONLY!!!!!!"


/call LoadIni Assist MainAssist			string	${MyBuffTargetName[1]}
/declare AssistSpell[${NumberOfSpells}]	string	outer
/call LoadIni Assist AssistSpell		string	NULL	AssistSpell
/declare AssistPct[${NumberOfSpells}]	int	outer
/call LoadIni Assist AssistPct			int	60 AssistPct

/if (${Debug}) {
/echo This is Main Assist:  ${MainAssist}
/echo This is Number of Spells:  ${NumberOfSpells}
}

/call VersionControl
/call CheckPlugin MQ2Cast
/call CheckPlugin MQ2Moveutils
|==================== DO NOT ALTER THESE VALUES ====================

|---------------------------------------------------------------------------------
/echo
/echo KeepToonBuffed.mac - Version: ${MacroVer} by TreeHuginDruid
/echo 
|---------------------------------------------------------------------------------

|---------------------------------------------------------------------------------
/if (${Defined[SpellSetName]} || ${SpellSetName.NotEqual[null]}) {
    /echo Memming spellset (${SpellSetName}).
    /memspellset ${SpellSetName}
    /delay 5s
}   
|---------------------------------------------------------------------------------

:loop 

|| Checking health
    /if (${HealsOn})  /call CheckMyHealth
    /if (${HealsOn})  /call CheckTargetHealth
    /if (${Me.PctMana}<=${MinManaPct}) && !${Me.CombatState.Equal[COMBAT]}) /call CheckMana

     

    /target ${MainAssist}
    /delay 1s
    /if (${AssistOn} && ${Select[${Me.TargetOfTarget.Type},NPC,PET]}) {
        
        /if (${DEBUG}) {
           /echo Attack True!
        }
           
           /goto :combat

        

    } 

    /if (${BuffsOn})  /call MaintainTargetBuffs
    /if ((${Me.PctMana}<=${MinManaPct}) && !${Me.CombatState.Equal[COMBAT]}) /call CheckMana
    /if (${FollowGroup}) /call FollowAround
    |Internal second delay to allow for manual moving, prevents constant sit loop if only 1 toon being buffed.
    /delay 10
    /if (${Me.Standing} && !${Me.Casting.ID} && !${Me.CombatState.Equal[COMBAT]} && !${Me.Moving} && !${Me.Mount.ID}) /sit 

   
     
     
  
/goto :loop




 :combat

   
            
            /target ${MainAssist}
            /delay 1s

            /echo \ao Calling AssistOnTarget: Target  \at (${Target.CleanName})
            /call AssistOnTarget
            |Check Health
            /if (${HealsOn})  /call CheckMyHealth
            /if (${HealsOn})  /call CheckTargetHealth
            /if (${AssistOn} && ${Select[${Me.TargetOfTarget.Type},NPC,PET]} ) {
           
           /goto :combat

    } else {
        /goto :loop
    }

/return
|---------------------------------------------------------------------------------

|---------------------------------------------------------------------------------
| SUB: Version Control
|---------------------------------------------------------------------------------
Sub VersionControl

/if (${MacroVer.NotEqual[${KeepToonBuffVer}]}) {
    /echo Version mismatch detected, please wait until this is corrected.
    /ini "${IniFileName}" "General" "MacroVer" "${KeepToonBuffVer}"
    /echo Version information updated.
    /call LoadIni General MacroVer	string	${KeepToonBuffVer}
}

/return
|---------------------------------------------------------------------------------

|---------------------------------------------------------------------------------
| SUB: Check Plugin
|---------------------------------------------------------------------------------
Sub CheckPlugin(string pluginname)

/if (!${Bool[${Plugin[${pluginname}]}]}) {
    /squelch /plugin ${pluginname}
    /echo ${pluginname} not detected! This macro requires it! Loading ...
}
    
/return
|---------------------------------------------------------------------------------

|---------------------------------------------------------------------------------
| SUB: CreateIni
|---------------------------------------------------------------------------------
Sub CreateIni

/if (${Ini[${IniFileName}].Length}) /return
/declare a local General|Mana|Heal|Toons|Buffs|
/echo Creating ini file ${IniFileName}
/declare i int local 1
/for i 1 to 5
/ini ${IniFileName} "${a.Arg[${i},|]}" "|===================================" "==================================|"
/next i
/echo Please edit your ini file ${IniFileName} and restart Shambot

/return
|---------------------------------------------------------------------------------

|---------------------------------------------------------------------------------
| SUB: Load Ini
|---------------------------------------------------------------------------------
Sub LoadIni(string sectionName, string varName, string varType, string varValue, string varArray, string FileName)
   
   | Assign ini name to default ini if not defined
    /if (${FileName.Length}==0) {
       |declaration not needed
       | /declare FileName string local
        /varset FileName ${IniFileName}
    }
    /if (${DebugINI}) {
	/echo DEBUG LoadIni: enter
	/delay 2
	/echo \atDebugINI Sub Loadini sectionName=(${sectionName}) varName=(${varName}) varType=(${varType}) varValue=(${varValue}) varArray=(${varArray}) FileName=(${FileName}) \agLine#: ${Macro.CurLine}
    }
    | Check if ini value is asking for an array ie buff1 to buff20
    | /if (!${varArray.Equal[NULL]}) {
    
    |### Changed to check if varArray is defined
      /if (${Defined[${varArray}]}) {
    | /if (${${varArray}.Size}>0) {
        /declare i int local
        /for i 1 to ${${varArray}.Size}	
        /if (!${Ini[${FileName},${sectionName},${varArray}${i}].Length}) {
            /if (${DebugINI}) /echo /ini "${FileName}" "${sectionName}" "${varArray}${i}" "${varValue}" ***
            /ini "${FileName}" "${sectionName}" "${varArray}${i}" "${varValue}"
        }                                        
        /if (${Ini[${FileName},${sectionName},${varArray}${i}].Length}) {
            /if (${DebugINI}) /echo /varset ${varArray}[${i}] ${Ini[${FileName},${sectionName},${varArray}${i}]} ***
            /varset ${varArray}[${i}] ${Ini[${FileName},${sectionName},${varArray}${i}]}
        }                    
        /next i
    /return
    } else {
        /if (!${Defined[${varName}]} && ${Defined[varType]}) /declare ${varName} ${varType} outer
        /if (!${Ini[${FileName},${sectionName},${varName}].Length}) {
            /if (${varValue.Length}) {
                /ini "${FileName}" "${sectionName}" "${varName}" "${varValue}"
                /varset ${varName} ${varValue}
                /if (${Debug}) /echo \atDEBUG Sub Loadini /varset ${varName} ${varValue} \agLine#: ${Macro.CurLine}
            }
        } else {
            /varset ${varName} ${Ini[${FileName},${sectionName},${varName}]}
        }
    /if (${DebugINI}) /echo DEBUG LoadIni: leave
    /return
|--------------------------------------------------------------------------------- 

