| Usage: /mac skills
| Purpose: To automatically raise all skills
| Feature: Target something to use targeted abilities automatically. 
| Recommendation: Use a private location for using this macro such as a
|                 private guild lobby. Use a training dummy to make skills
|                 overnight. 
| 
| --------------------------------------------------------------------------------------------
| SUB: Main
| --------------------------------------------------------------------------------------------
Sub Main
	/declare medTill int outer 100
	/echo ${Macro.Name} loaded.
:mainloop
	/call Abilities
	/if (${Me.Class.CanCast}) {
		/if (${Me.PctMana} < 10 && !${Me.Sitting}) {
			/sit
			:med
			/if (${Me.PctMana} < ${medTill}) /goto :med
		} else {
			/call Skills
		}
	}
	/goto :mainloop
/return

| --------------------------------------------------------------------------------------------
| SUB: Abilities
| --------------------------------------------------------------------------------------------
Sub Abilities
	/if (${Me.Skill[tracking]} < ${Skill[tracking].SkillCap} && ${Me.AbilityReady[tracking]}) /doability "tracking"
	/if (${Window[TrackingWnd].Child[TRW_DoneButton]}) /notify TrackingWnd TRW_DoneButton leftmouseup
	/if (${Me.Skill[feign death]} < ${Skill[feign death].SkillCap} && ${Me.AbilityReady[feign death]}) {
		/doability "feign death"
		/delay 5
		/if (!${Me.Standing}) /stand
	}
	/if (${Me.Skill[hide]} < ${Skill[hide].SkillCap} && ${Me.AbilityReady[hide]}) /doability "hide"
	/if (${Me.Skill[sneak]} < ${Skill[sneak].SkillCap} && ${Me.AbilityReady[sneak]}) /doability "sneak"
	/if (${Me.Skill[mend]} < ${Skill[mend].SkillCap} && ${Me.AbilityReady[mend]}) /doability "mend"
	/if (!${Target.ID}||${Target.Type.Equal[pc]} && ${Zone.Type}||${Target.Master.Type.Equal[PC]} && ${Zone.Type}||${Target.Type.Equal[corpse]}||${Target.Distance}>${Target.MaxRange}||${Target.ID}==${Me.ID}) /return
	/if (${Me.AbilityReady[flying kick]}) /doability "flying kick"
	/if (${Me.AbilityReady[bash]} && (${InvSlot[offhand].Item.Type.Find[shield]}||${Me.AltAbility[2 Hand Bash]})) /doability "bash"
	/if (${Me.AbilityReady[frenzy]}) /doability "frenzy"
	/if (${Me.AbilityReady[slam]} && !${Me.AbilityReady[bash]}) /doability "slam"
	/if (${Me.AbilityReady[round kick]}) /doability "round kick"
	/if (${Me.AbilityReady[kick]}) /doability "kick"
	/if (${Me.AbilityReady[tiger claw]}) /doability "tiger claw"
	/if (${Target.Distance}<12 && ${Me.AbilityReady[Disarm]}) /doability "Disarm"
	/if (${Me.AbilityReady[Backstab]} && ${Melee.Behind}) /doability "Backstab"
/return

| --------------------------------------------------------------------------------------------
| SUB: Skills
| --------------------------------------------------------------------------------------------
Sub Skills
	/if (${Me.Casting.ID} && !${Me.Class.ShortName.Equal[BRD]}||${Me.Hovering}||${Window[tradewnd].Open}||${Window[lootwnd].Open}) /return
	/if (${Me.Skill[Abjuration]} < ${Skill[Abjuration].SkillCap}) /call Raise Abjuration
	/if (${Me.Skill[Alteration]} < ${Skill[Alteration].SkillCap}) /call Raise Alteration
	/if (${Me.Skill[Conjuration]} < ${Skill[Conjuration].SkillCap}) /call Raise Conjuration
	/if (${Me.Skill[Divination]} < ${Skill[Divination].SkillCap}) /call Raise Divination
	/if (${Me.Skill[Evocation]} < ${Skill[Evocation].SkillCap}) /call Raise Evocation
	/if (${Me.Skill[Divination]} >= ${Skill[Divination].SkillCap} && ${Me.Skill[Evocation]} >= ${Skill[Evocation].SkillCap} && ${Me.Skill[Abjuration]} >= ${Skill[Abjuration].SkillCap} && ${Me.Skill[Alteration]} >= ${Skill[Alteration].SkillCap} && ${Me.Skill[Divination]} >= ${Skill[Divination].SkillCap} && ${Me.Skill[Conjuration]} >= ${Skill[Conjuration].SkillCap}) {
		/echo Skills maxed.
		/end
	}
/return

| --------------------------------------------------------------------------------------------
| SUB: Raise
| --------------------------------------------------------------------------------------------
Sub Raise(skilltype)
	/if (${Me.Casting.ID} && !${Me.Class.ShortName.Equal[BRD]}||${Me.Hovering}||${Window[tradewnd].Open}||${Window[lootwnd].Open}) /return
	/declare i int local
:checkcursor
	/if (${Cursor.ID} && !${Cursor.NoRent} && ${skilltype.Equal[Conjuration]}) /autoinv
	/if (${Cursor.ID} && ${Cursor.NoRent} && ${skilltype.Equal[Conjuration]}) /destroy
	/if (${Cursor.ID} && ${skilltype.Equal[Conjuration]}) /goto :checkcursor
	/for i 1 to 12
		/if (${Me.CurrentMana}>${Me.Gem[${i}].Mana} && ${Me.Gem[${i}].Skill.Equal[${skilltype}]} && !${Me.GemTimer[${i}]} && ${Me.SpellReady[${Me.Gem[${i}]}]} && !${Select[${Me.Gem[${i}].Category},Transport,Traps,Aura]} && !${Select[${Me.Gem[${i}].Subcategory},Misc,Invulnerability]} && (!${Me.Gem[${i}].Subcategory.Find[Sum: ]}||!${Me.Pet.ID})) {
			/if (${Me.Gem[${i}].TargetType.Equal[Single]} && ${Target.Type.NotEqual[npc]} && ${${Me.Gem[${i}].SpellType.Equal[Detrimental]}}) {
				/squelch /tar npc range ${Me.Gem[${i}].MyRange}
				/delay 1
				/if (!${Target.ID}) /squelch /tar myself
				/delay 1
			}
			/if (${Me.Gem[${i}].TargetType.Equal[Single]} && !${Target.ID} && ${${Me.Gem[${i}].SpellType.NotEqual[Detrimental]}}) {
				/if (!${Target.ID}) /squelch /tar myself
				/delay 1
			}
			/if (${Me.Gem[${i}].TargetType.Equal[pet]} && !${Me.Pet.ID}) /goto :skip
			/casting "${Me.Gem[${i}]}" gem${i}
			/delay 1s
			/delay 10s !${Me.Casting.ID}
		}
	:skip
	/next i

/return


|  [+++  Formatted by MQ2f using tabs for indents +++]
