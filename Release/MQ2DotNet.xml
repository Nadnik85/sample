<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MQ2DotNet</name>
    </assembly>
    <members>
        <member name="T:MQ2DotNet.AppDomainBase">
            <summary>
            An instance of this class is created in the default domain for each newly loaded AppDomain
            </summary>
        </member>
        <member name="M:MQ2DotNet.AppDomainBase.ResolveCurrentAssembly(System.Object,System.ResolveEventArgs)">
            <summary>
            Allow's the AppDomain to resolve the currently executing assembly, e.g. to load in a new AppDomain
            This will need to be added to <code>AppDomain.CurrentDomain.AssemblyResolve</code> if this assembly is not in the AppDomain's base directory
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MQ2DotNet.AppDomainBase.Load``2(System.String,System.Func{System.AppDomain,``1,``0},System.Collections.Generic.IEnumerable{System.String},System.Object[])">
             <summary>
             This function:
             * Creates a new AppDomain
             * Loads in it the assembly containing <typeparamref name="TLoaded"/>
             * Creates an instance of <typeparamref name="TLoaded"/> in the new appdomain
             * Creates and returns new instance of <typeparamref name="T"/>
            
             If an exception is thrown after the AppDomain is created, it is unloaded before rethrowing
             </summary>
             <typeparam name="T">Type to create in the current appdomain</typeparam>
             <typeparam name="TLoaded">Type to create in the newly loaded appdomain</typeparam>
             <param name="appDomainName"></param>
             <param name="constructor">Function to create an instance of <typeparamref name="T"/> given an AppDomain and a <typeparamref name="TLoaded"/></param>
            <param name="args">Arguments to pass to the constructor of <typeparamref name="TLoaded"/></param>
            <returns></returns>
        </member>
        <member name="M:MQ2DotNet.Script.ScriptAppDomain.Load(System.String)">
            <summary>
            Loads a new .NET program from the specified assembly file, in a new app domain
            </summary>
            <param name="scriptFilePath"></param>
            <param name="appDomainName"></param>
        </member>
        <member name="T:MQ2DotNet.Script.ScriptGlobals">
            <summary>
            Used to pass arguments to scripts
            </summary>
        </member>
        <member name="F:MQ2DotNet.Script.ScriptGlobals.Args">
            <summary>
            Arguments passed to /cs
            </summary>
        </member>
        <member name="F:MQ2DotNet.Script.ScriptGlobals.Token">
            <summary>
            Cancellation token that will be cancelled when a user does /endcs
            </summary>
        </member>
        <member name="F:MQ2DotNet.Script.ScriptGlobals.MQ2">
            <summary>
            Basic MQ2 functions - execute commands, write chat, parse strings
            </summary>
        </member>
        <member name="F:MQ2DotNet.Script.ScriptGlobals.Commands">
            <summary>
            Functions for adding/removing commands
            </summary>
        </member>
        <member name="F:MQ2DotNet.Script.ScriptGlobals.Chat">
            <summary>
            Contains utility methods and properties relating to ingame chat (messages in a chat window, from EQ or MQ2)
            </summary>
        </member>
        <member name="F:MQ2DotNet.Script.ScriptGlobals.TLO">
            <summary>
            Contains all standard top level objects
            </summary>
        </member>
        <member name="F:MQ2DotNet.Script.ScriptGlobals.Events">
            <summary>
            Contains events for all standard MQ2 plugin callbacks
            </summary>
        </member>
        <member name="F:MQ2DotNet.Script.ScriptGlobals.Spawns">
            <summary>
            Contains utility methods and properties relating to spawns
            </summary>
        </member>
        <member name="M:MQ2DotNet.Script.LoadedScriptAppDomain.Start(System.String,System.String[])">
            <summary>
            Loads and runs a new C# script from the specified file
            </summary>
            <param name="scriptFilePath"></param>
            <param name="args"></param>
        </member>
        <member name="T:MQ2DotNet.Services.Chat">
            <summary>
            Contains utility methods and properties relating to ingame chat (messages in a chat window, from EQ or MQ2)
            </summary>
        </member>
        <member name="M:MQ2DotNet.Services.Chat.WaitFor(System.Predicate{System.String},System.Threading.CancellationToken)">
            <summary>
            Wait indefinitely for a line of chat from either EQ or MQ2 matching <paramref name="predicate"/>
            </summary>
            <param name="predicate">Function that returns true if a line matches</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MQ2DotNet.Services.Chat.WaitFor(System.Predicate{System.String},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Wait for up to <paramref name="timeout"/> milliseconds for a line of chat from either EQ or MQ2 matching <paramref name="predicate"/>
            </summary>
            <param name="predicate">Function that returns true if a line matches</param>
            <param name="timeout">Number of milliseconds to wait before timing out</param>
            <param name="cancellationToken"></param>
            <returns>Returns true if a match was found or false if the timeout elapsed</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException" />
        </member>
        <member name="M:MQ2DotNet.Services.Chat.WaitFor(System.Predicate{System.String},System.Int32)">
            <summary>
            Wait for up to <paramref name="timeout"/> milliseconds for a line of chat from either EQ or MQ2 matching <paramref name="predicate"/>
            </summary>
            <param name="predicate">Function that returns true if a line matches</param>
            <param name="timeout">Number of milliseconds to wait before timing out</param>
            <returns>Returns true if a match was found or false if the timeout elapsed</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException" />
        </member>
        <member name="M:MQ2DotNet.Services.Chat.WaitForEQ(System.Predicate{System.String},System.Threading.CancellationToken)">
            <summary>
            Wait indefinitely for a line of chat from EQ (and not MQ2) matching <paramref name="predicate"/>
            </summary>
            <param name="predicate">Function that returns true if a line matches</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MQ2DotNet.Services.Chat.WaitForEQ(System.Predicate{System.String},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Wait for up to <paramref name="timeout"/> milliseconds for a line of chat from EQ (and not MQ2) matching <paramref name="predicate"/>
            </summary>
            <param name="predicate">Function that returns true if a line matches</param>
            <param name="timeout">Number of milliseconds to wait before timing out</param>
            <param name="cancellationToken"></param>
            <returns>Returns true if a match was found or false if the timeout elapsed</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException" />
        </member>
        <member name="M:MQ2DotNet.Services.Chat.WaitForEQ(System.Predicate{System.String},System.Int32)">
            <summary>
            Wait for up to <paramref name="timeout"/> milliseconds for a line of chat from EQ (and not MQ2) matching <paramref name="predicate"/>
            </summary>
            <param name="predicate">Function that returns true if a line matches</param>
            <param name="timeout">Number of milliseconds to wait before timing out</param>
            <returns>Returns true if a match was found or false if the timeout elapsed</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException" />
        </member>
        <member name="M:MQ2DotNet.Services.Chat.WaitForMQ2(System.Predicate{System.String},System.Threading.CancellationToken)">
            <summary>
            Wait indefinitely for a line of chat from MQ2 (and not EQ) matching <paramref name="predicate"/>
            </summary>
            <param name="predicate">Function that returns true if a line matches</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MQ2DotNet.Services.Chat.WaitForMQ2(System.Predicate{System.String},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Wait for up to <paramref name="timeout"/> milliseconds for a line of chat from MQ2 (and not EQ) matching <paramref name="predicate"/>
            </summary>
            <param name="predicate">Function that returns true if a line matches</param>
            <param name="timeout">Number of milliseconds to wait before timing out</param>
            <param name="cancellationToken"></param>
            <returns>Returns true if a match was found or false if the timeout elapsed</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException" />
        </member>
        <member name="M:MQ2DotNet.Services.Chat.WaitForMQ2(System.Predicate{System.String},System.Int32)">
            <summary>
            Wait for up to <paramref name="timeout"/> milliseconds for a line of chat from MQ2 (and not EQ) matching <paramref name="predicate"/>
            </summary>
            <param name="predicate">Function that returns true if a line matches</param>
            <param name="timeout">Number of milliseconds to wait before timing out</param>
            <returns>Returns true if a match was found or false if the timeout elapsed</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException" />
        </member>
        <member name="T:MQ2DotNet.Services.Spawns">
            <summary>
            Contains utility methods and properties relating to spawns
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.Spawns.All">
            <summary>
            All spawns in the current zone
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.Spawns.AllGround">
            <summary>
            All ground spawns in the current zone
            </summary>
        </member>
        <member name="T:MQ2DotNet.Services.Events">
            <summary>
            Contains events a plugin/program/script can subscribe to
            </summary>
        </member>
        <member name="M:MQ2DotNet.Services.Events.Finalize">
            <inheritdoc />
        </member>
        <member name="M:MQ2DotNet.Services.Events.Dispose">
            <inheritdoc />
        </member>
        <member name="E:MQ2DotNet.Services.Events.OnChatEQ">
            <summary>
            Fired on a line of chat from EQ
            </summary>
        </member>
        <member name="E:MQ2DotNet.Services.Events.OnChatMQ2">
            <summary>
            Fired on a line of chat from MQ2
            </summary>
        </member>
        <member name="E:MQ2DotNet.Services.Events.OnChat">
            <summary>
            Fired from a line of chat from either EQ or MQ2
            </summary>
        </member>
        <member name="E:MQ2DotNet.Services.Events.BeginZone">
            <summary>
            This is called when we receive the EQ_BEGIN_ZONE packet
            </summary>
        </member>
        <member name="E:MQ2DotNet.Services.Events.EndZone">
            <summary>
            This is called when we receive the EQ_END_ZONE packet
            </summary>
        </member>
        <member name="E:MQ2DotNet.Services.Events.OnAddGroundItem">
            <summary>
            Fired when a new ground item is added. Will be fired once for each ground item in the zone when entering a new zone
            </summary>
        </member>
        <member name="E:MQ2DotNet.Services.Events.OnRemoveGroundItem">
            <summary>
            Fired when a ground item is removed. Will be fired once for each ground item in the zone when exiting a zone
            </summary>
        </member>
        <member name="E:MQ2DotNet.Services.Events.OnAddSpawn">
            <summary>
            Fired when a new spawn is added. Will be fired once for each spawn in the zone when entering a new zone
            </summary>
        </member>
        <member name="E:MQ2DotNet.Services.Events.OnRemoveSpawn">
            <summary>
            Fired when a spawn is removed. Will be fired once for each spawn in the zone when exiting a zone
            </summary>
        </member>
        <member name="E:MQ2DotNet.Services.Events.OnCleanUI">
            <summary>
            Called once directly before shutdown of the new ui system, and also every time the game calls CDisplay::CleanGameUI()
            </summary>
        </member>
        <member name="E:MQ2DotNet.Services.Events.OnDrawHUD">
            <summary>
            Called every frame that the "HUD" is drawn -- e.g. net status / packet loss bar
            </summary>
        </member>
        <member name="E:MQ2DotNet.Services.Events.OnReloadUI">
            <summary>
            Called once directly after the game ui is reloaded, after issuing /loadskin
            </summary>
        </member>
        <member name="E:MQ2DotNet.Services.Events.OnZoned">
            <summary>
            Similar/same as EndZone ?
            </summary>
        </member>
        <member name="E:MQ2DotNet.Services.Events.SetGameState">
            <summary>
            Called once directly after initialization, and then every time the gamestate changes
            </summary>
        </member>
        <member name="T:MQ2DotNet.Services.TLO">
            <summary>
            Provides access to all top level objects
            </summary>
        </member>
        <member name="M:MQ2DotNet.Services.TLO.#ctor(MQ2DotNet.MQ2API.MQ2TypeFactory)">
            <summary>
            Creates a new instance of TLO that uses the supplied MQ2TypeFactory to create MQ2DataType
            </summary>
            <param name="typeFactory"></param>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Me">
            <summary>
            Your character
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Target">
            <summary>
            Your target
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Switch">
            <summary>
            Your current door target
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Mercenary">
            <summary>
            Your mercenary
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Pet">
            <summary>
            Your pet
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Merchant">
            <summary>
            Merchant that is currently open
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Corpse">
            <summary>
            Corpse that is currently open
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Macro">
            <summary>
            Macro that is running
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.MacroQuest">
            <summary>
            <see cref="T:MQ2DotNet.MQ2API.DataTypes.MacroQuestType"/> instance
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.EverQuest">
            <summary>
            <see cref="T:MQ2DotNet.MQ2API.DataTypes.EverQuestType"/> instance
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Group">
            <summary>
            <see cref="T:MQ2DotNet.MQ2API.DataTypes.GroupType"/> instance
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Cursor">
            <summary>
            Item on your cursor
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.GameTime">
            <summary>
            Current in game time
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.SelectedItem">
            <summary>
            TODO: What does SelectedItem give?
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Raid">
            <summary>
            <see cref="T:MQ2DotNet.MQ2API.DataTypes.RaidType"/> instance
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.NamingSpawn">
            <summary>
            Spawn whose name is currently being drawn
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.DoorTarget">
            <summary>
            Your current door target
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.ItemTarget">
            <summary>
            Your current item target
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.DynamicZone">
            <summary>
            <see cref="T:MQ2DotNet.MQ2API.DataTypes.DynamicZoneType"/> instance
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Friends">
            <summary>
            <see cref="T:MQ2DotNet.MQ2API.DataTypes.FriendsType"/> instance
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.AdvLoot">
            <summary>
            <see cref="T:MQ2DotNet.MQ2API.DataTypes.AdvLootType"/> instance
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.PointMerchant">
            <summary>
            Point merchnat that is currently open
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.CurrentZone">
            <summary>
            Zone you are currently in
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Heading">
            <summary>
            Heading to a location in y,x format
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Spawn">
            <summary>
            First spawn that matches a search string
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Spell">
            <summary>
            Spell by name or ID
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.GroundItem">
            <summary>
            Ground item by name (partial match), or your current ground target if an empty index is supplied
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.GroundItemCount">
            <summary>
            Number of ground items by name (partial match), or total number of ground items if an empty index is supplied
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Window">
            <summary>
            Window by name
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Zone">
            <summary>
            Zone by ID or short name. For current zone, use <see cref="P:MQ2DotNet.Services.TLO.CurrentZone"/>
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.LastSpawn">
            <summary>
            Spawn by position in the list, from the end for negative numbers
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.NearestSpawn">
            <summary>
            Nth nearest spawn that matches a search e.g. "2,npc" for the 2nd closest NPC
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.SpawnCount">
            <summary>
            Total number of spawns that match a search
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Defined">
            <summary>
            Is a variable by the given name defined?
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.FindItem">
            <summary>
            Item by name, partial match unless it begins with an = e.g. "=Water Flask"
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.FindItemBank">
            <summary>
            An item in your bank, partial match unless it begins with an = e.g. "=Water Flask"
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.FindItemCount">
            <summary>
            Total number of an item you have, partial match unless it begins with an = e.g. "=Water Flask"
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.FindItemBankCount">
            <summary>
            Total number of an item you have in your bank, partial match unless it begins with an = e.g. "=Water Flask"
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.InvSlot">
            <summary>
            An inventory slot by name or number
            </summary>
            <remarks>Valid slot numbers are:
            2000-2015 bank window
            2500-2503 shared bank
            5000-5031 loot window
            3000-3015 trade window (including npc) 3000-3007 are your slots, 3008-3015 are other character's slots
            4000-4010 world container window
            6000-6080 merchant window
            7000-7080 bazaar window
            8000-8031 inspect window</remarks>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Plugin">
            <summary>
            Plugin by name or number
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Skill">
            <summary>
            Skill by name or number
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.AltAbility">
            <summary>
            Alt ability by name or number
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.LineOfSight">
            <summary>
            Is there line of sight between two locations, in the format "y,x,z:y,x,z"
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Task">
            <summary>
            Task by name or position in window (1 based)
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Mount">
            <summary>
            Mount (on keyring) by name or position in window (1 based). Name is partial match unless it begins with =
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Illusion">
            <summary>
            Illusion (on keyring) by name or position in window (1 based). Name is partial match unless it begins with =
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Familiar">
            <summary>
            Familiar (on keyring) by name or position in window (1 based). Name is partial match unless it begins with =
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Alias">
            <summary>
            Is an alias set for a command, including the slash e.g. Alias["/chaseon"]
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.AlertByNumber">
            <summary>
            An alert list by number
            For the equivalent of ${Alert}, see <see cref="P:MQ2DotNet.Services.TLO.Alerts"/>
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Alerts">
            <summary>
            Pipe separated list of all alert lists in use, e.g. "1|2"
            Equivalent of ${Alert}
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.Menu">
            <summary>
            Currently open context menu
            </summary>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.SubDefined">
            <summary>
            Is a sub with the given name defined?
            </summary>
        </member>
        <member name="M:MQ2DotNet.Services.TLO.GetTLO``1(System.String,System.String)">
            <summary>
            Get a TLO by name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.Services.TLO.IndexedTLO`2">
            <summary>
            Helper class for a TLO that is accessed with an indexer
            </summary>
            <typeparam name="T">Data type to return</typeparam>
            <typeparam name="TIndex">Type for index parameter</typeparam>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.IndexedTLO`2.Item(`1)">
            <summary>
            Get the TLO using an index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.Services.TLO.IndexedTLO`1">
            <inheritdoc />
        </member>
        <member name="T:MQ2DotNet.Services.TLO.IndexedTLO`4">
            <summary>
            Helper class for a TLO that is accessed with an indexer
            </summary>
            <typeparam name="T1">Data type to return given first index type</typeparam>
            <typeparam name="TIndex1">First type for index parameter</typeparam>
            <typeparam name="T2">Data type to return given second index type</typeparam>
            <typeparam name="TIndex2">Second type for index parameter</typeparam>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.IndexedTLO`4.Item(`1)">
            <summary>
            Get the TLO using an index of type <typeparamref name="TIndex1"/>
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:MQ2DotNet.Services.TLO.IndexedTLO`4.Item(`3)">
            <summary>
            Get the TLO using an index of type <typeparamref name="TIndex2"/>
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.Services.Commands">
            <summary>
            Plugin functions for adding or removing commands
            </summary>
        </member>
        <member name="M:MQ2DotNet.Services.Commands.Finalize">
            <inheritdoc />
        </member>
        <member name="M:MQ2DotNet.Services.Commands.Dispose">
            <inheritdoc />
        </member>
        <member name="T:MQ2DotNet.Services.Commands.Command">
            <summary>
            Delegate for a synchronous command handler
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:MQ2DotNet.Services.Commands.AsyncCommand">
            <summary>
            Delegate for an asynchronous command handler
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MQ2DotNet.Services.Commands.AddCommand(System.String,MQ2DotNet.Services.Commands.Command,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add a new synchronous command
            </summary>
            <param name="command"></param>
            <param name="handler"></param>
            <param name="EQ"></param>
            <param name="parse"></param>
            <param name="inGame"></param>
        </member>
        <member name="M:MQ2DotNet.Services.Commands.AddAsyncCommand(System.String,MQ2DotNet.Services.Commands.AsyncCommand,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add a new asynchronous command
            </summary>
            <param name="command"></param>
            <param name="handler"></param>
            <param name="EQ"></param>
            <param name="parse"></param>
            <param name="inGame"></param>
        </member>
        <member name="M:MQ2DotNet.Services.Commands.RemoveCommand(System.String)">
            <summary>
            Removes a command, and removes the stored reference to the delegate if it was added from this plugin
            </summary>
            <param name="command">Command to remove, including the slash e.g. "/echo"</param>
        </member>
        <member name="M:MQ2DotNet.Services.Commands.AddCommand(System.String,MQ2DotNet.Services.Commands.fEQCommand,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a new command
            Note: this function will ensure the delegate is not garbage collected prior to RemoveCommand being called
            </summary>
            <param name="command">Text to look for, including the slash e.g. "/echo"</param>
            <param name="function">Method to be invoked when command is executed</param>
            <param name="EQ">TODO: What is this?</param>
            <param name="parse">If <c>true</c>, MQ2 variables will be parsed prior to invoking <paramref name="function"/></param>
            <param name="inGame">TODO: What is this?</param>
        </member>
        <member name="M:MQ2DotNet.Services.Commands.GetArgs(System.String)">
            <summary>
            Split a string into an array of arguments separated by spaces
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.EQ.GameState">
            <summary>
            State of the game, e.g. char select, in game
            </summary>
        </member>
        <member name="T:MQ2DotNet.EQ.Class">
            <summary>
            A character class
            </summary>
        </member>
        <member name="T:MQ2DotNet.EQ.Race">
            <summary>
            In game race
            TODO: Add other races
            </summary>
        </member>
        <member name="T:MQ2DotNet.LoadedAppDomainBase">
            <summary>
            An instance of this class sits in each newly loaded AppDomain, and serves as an access point into it from the DefaultDomain
            </summary>
        </member>
        <member name="P:MQ2DotNet.LoadedAppDomainBase.Name">
            <summary>
            Friendly name for the app domain
            </summary>
        </member>
        <member name="M:MQ2DotNet.LoadedAppDomainBase.OnPulse">
            <summary>
            Called each pulse, from the main thread
            </summary>
        </member>
        <member name="P:MQ2DotNet.LoadedAppDomainBase.Finished">
            <summary>
            Indicates that the AppDomain has finished whatever it was doing, and can be disposed
            Return false here doesn't mean it can't/won't be disposed, just that it shouldn't be automatically
            </summary>
        </member>
        <member name="M:MQ2DotNet.LoadedAppDomainBase.BeforePulse">
            <summary>
            Called from OnPulse, prior to any continuations on the sync context
            </summary>
        </member>
        <member name="M:MQ2DotNet.LoadedAppDomainBase.AfterPulse">
            <summary>
            Called from OnPulse, after any continuations on the sync context
            </summary>
        </member>
        <member name="F:MQ2DotNet.LoadedAppDomainBase.OnChatEQ">
            <summary>
            Fired on a line of chat from EQ
            </summary>
        </member>
        <member name="F:MQ2DotNet.LoadedAppDomainBase.OnChatMQ2">
            <summary>
            Fired on a line of chat from MQ2
            </summary>
        </member>
        <member name="F:MQ2DotNet.LoadedAppDomainBase.OnChat">
            <summary>
            Fired from a line of chat from either EQ or MQ2
            </summary>
        </member>
        <member name="F:MQ2DotNet.LoadedAppDomainBase.BeginZone">
            <summary>
            This is called when we receive the EQ_BEGIN_ZONE packet
            </summary>
        </member>
        <member name="F:MQ2DotNet.LoadedAppDomainBase.EndZone">
            <summary>
            This is called when we receive the EQ_END_ZONE packet
            </summary>
        </member>
        <member name="F:MQ2DotNet.LoadedAppDomainBase.OnAddGroundItem">
            <summary>
            Fired when a new ground item is added. Will be fired once for each ground item in the zone when entering a new zone
            </summary>
        </member>
        <member name="F:MQ2DotNet.LoadedAppDomainBase.OnRemoveGroundItem">
            <summary>
            Fired when a ground item is removed. Will be fired once for each ground item in the zone when exiting a zone
            </summary>
        </member>
        <member name="F:MQ2DotNet.LoadedAppDomainBase.OnAddSpawn">
            <summary>
            Fired when a new spawn is added. Will be fired once for each spawn in the zone when entering a new zone
            </summary>
        </member>
        <member name="F:MQ2DotNet.LoadedAppDomainBase.OnRemoveSpawn">
            <summary>
            Fired when a spawn is removed. Will be fired once for each spawn in the zone when exiting a zone
            </summary>
        </member>
        <member name="F:MQ2DotNet.LoadedAppDomainBase.OnCleanUI">
            <summary>
            Called once directly before shutdown of the new ui system, and also every time the game calls CDisplay::CleanGameUI()
            </summary>
        </member>
        <member name="F:MQ2DotNet.LoadedAppDomainBase.OnDrawHUD">
            <summary>
            Called every frame that the "HUD" is drawn -- e.g. net status / packet loss bar
            </summary>
        </member>
        <member name="F:MQ2DotNet.LoadedAppDomainBase.OnReloadUI">
            <summary>
            Called once directly after the game ui is reloaded, after issuing /loadskin
            </summary>
        </member>
        <member name="F:MQ2DotNet.LoadedAppDomainBase.OnZoned">
            <summary>
            Similar/same as EndZone ?
            </summary>
        </member>
        <member name="F:MQ2DotNet.LoadedAppDomainBase.SetGameState">
            <summary>
            Called once directly after initialization, and then every time the gamestate changes
            </summary>
        </member>
        <member name="M:MQ2DotNet.Plugin.PluginAppDomain.Load(System.String,System.String)">
            <summary>
            Loads a new .NET plugin from the specified assembly file, in a new app domain
            </summary>
            <param name="assemblyFilePath"></param>
            <param name="appDomainName"></param>
        </member>
        <member name="T:MQ2DotNet.Plugin.IPlugin">
            <summary>
            Interface which a plugin must implement
            </summary>
        </member>
        <member name="M:MQ2DotNet.Plugin.IPlugin.InitializePlugin">
            <summary>
            Called once when the plugin is first loaded
            </summary>
            <remarks>
            If this method throws an exception, the plugin's AppDomain will be unloaded immediately without <see cref="M:MQ2DotNet.Plugin.IPlugin.ShutdownPlugin"/> being called
            </remarks>
        </member>
        <member name="M:MQ2DotNet.Plugin.IPlugin.ShutdownPlugin">
            <summary>
            Called once before the plugin is unloaded
            </summary>
        </member>
        <member name="M:MQ2DotNet.Plugin.IPlugin.OnPulse">
            <summary>
            Called once per frame
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.MQ2TypeAttribute">
            <summary>
            Indicates that the class should be used to represent an MQ2Type
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.MQ2TypeAttribute.TypeName">
            <summary>
            The name of the MQ2Type represented by the class
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2TypeAttribute.#ctor(System.String)">
            <summary>
            Indicate that the class should be used to represent an MQ2Type of <paramref name="typeName"/>
            </summary>
            <param name="typeName"></param>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType">
            <summary>
            MQ2 type for an item in the advanced loot window
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.Address">
            <summary>
            Memory address of the LOOTITEM struct
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.Index">
            <summary>
            Index of the item in either the shared or personal loot list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.Name">
            <summary>
            Name of the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.ID">
            <summary>
            ID of the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.StackSize">
            <summary>
            Maximum number of these items in one stack
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.Corpse">
            <summary>
            Spawn the item was dropped by
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.AutoRoll">
            <summary>
            State of the Autoroll checkbox for this item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.Need">
            <summary>
            State of the Need checkbox for this item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.Greed">
            <summary>
            State of the Greed checkbox for this item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.No">
            <summary>
            State of the No checkbox for this item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.AlwaysNeed">
            <summary>
            State of the AlwaysNeed checkbox for this item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.AlwaysGreed">
            <summary>
            State of the AlwaysGreed checkbox for this item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.Never">
            <summary>
            State of the Never checkbox for this item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.IconID">
            <summary>
            ID of the icon for this item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootItemType.NoDrop">
            <summary>
            True if the item is no drop
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.AdvLootType">
            <summary>
            MQ2 type for the advanced loot window. Moreso the contents than the window itself
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootType.PCount">
            <summary>
            Number of items in the personal loot list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootType.PList">
            <summary>
            Returns an item from the personal loot list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootType.SCount">
            <summary>
            Number of items in the shared loot list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootType.SList">
            <summary>
            Returns an item from shared loot list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootType.PWantCount">
            <summary>
            Number of items in the personal loot list with either Need, Always Need, Greed, or Always Greed checked
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootType.SWantCount">
            <summary>
            Number of items in the shared loot list with either Need, Always Need, Greed, or Always Greed checked
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootType.LootInProgress">
            <summary>
            True if any item is currently being looted? TODO: Confirm this
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AdvLootType.Filter">
            <summary>
            Returns a filter from the advanced loot filters TODO: By what? Number in list or item ID?
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.AlertListType">
            <summary>
            MQ2 type for an alert list
            </summary>
            <remarks>VarPtr identifies a SPAWNSEARCH struct on an alert list</remarks>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.MinLevel">
            <summary>
            Minimum level, inclusive
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.MaxLevel">
            <summary>
            Maximum level, inclusive
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.SpawnType">
            <summary>
            Type, see eSpawnType in MQ2Internal.h
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.SpawnID">
            <summary>
            Spawn ID to match
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.FromSpawnID">
            <summary>
            Last spawn ID returned, used when iterating through a search spawn
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.Radius">
            <summary>
            Radius in which to search (around xLoc/yLoc if set, otherwise around character)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.Name">
            <summary>
            Include spawns matching this name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.BodyType">
            <summary>
            Include spawns with this body type description e.g. Humanoid
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.Race">
            <summary>
            Include spawns with this race e.g. Vah Shir
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.Class">
            <summary>
            Include spawns with this class e.g. Cleric
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.Light">
            <summary>
            Include spawns with this light
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.GuildID">
            <summary>
            Include spawns in this guild ID
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bSpawnID">
            <summary>
            SpawnID filter enabled?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bNotNearAlert">
            <summary>
            Not near alert filter enabled?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bNearAlert">
            <summary>
            Near alert filter enabled?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bNoAlert">
            <summary>
            No alert filter enabled?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bAlert">
            <summary>
            Alert filter enabled?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bLFG">
            <summary>
            Only include LFG spawns?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bTrader">
            <summary>
            Only include trader spawns?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bLight">
            <summary>
            Light filter enabled?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bTargNext">
            <summary>
            Return next spawn in list after <see cref="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.FromSpawnID"/>?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bTargPrev">
            <summary>
            Return prev spawn in list before <see cref="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.FromSpawnID"/>?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bGroup">
            <summary>
            Include group members only?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bFellowship">
            <summary>
            Include fellowship members only?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bNoGroup">
            <summary>
            Exclude group members?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bRaid">
            <summary>
            Exclude raid members?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bGM">
            <summary>
            Include GMs only?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bNamed">
            <summary>
            Include named NPCs only?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bMerchant">
            <summary>
            Include merchants only?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bTributeMaster">
            <summary>
            Include tribute masters only?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bKnight">
            <summary>
            Include knights (PAL/SHD) only?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bTank">
            <summary>
            Include tanks (WAR/PAL/SHD) only?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bHealer">
            <summary>
            Include healers (CLR/SHM/DRU) only?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bDps">
            <summary>
            Include DPS classes only?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bSlower">
            <summary>
            Include classes (ENC/SHM/BRD) that can slow only?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bAura">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bBanner">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bCampfire">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.NotID">
            <summary>
            Exclude spawn with an id of <see cref="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.SpawnID"/>
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.NotNearAlertList">
            <summary>
            Exclude spawns near a spawn on this alert list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.NearAlertList">
            <summary>
            Include spawns near a spawn on this alert list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.NoAlertList">
            <summary>
            Exclude spawns on this alert list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.AlertList">
            <summary>
            Include spawns on this alert list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.ZRadius">
            <summary>
            Include spawns within this distance of zLoc if set, otherwise character's z location
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.FRadius">
            <summary>
            Include spawns within this 3D distance of the xLoc/yLoc/zLoc if specified, otherwise character's location
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.xLoc">
            <summary>
            X location to base search around instead of character's
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.yLoc">
            <summary>
            Y location to base search around instead of character's
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bKnownLocation">
            <summary>
            If true, use xLoc/yLoc/zLoc insted of character's position
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bNoPet">
            <summary>
            Exclude pets?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.SortBy">
            <summary>
            What to sort the list by
            0 = level, 1 = display name (default), 2 = race, 3 = class, 4 = distance (2D, XY), 5 = guild, 6 = id
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bNoGuild">
            <summary>
            Exclude spawns in a guild
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bLoS">
            <summary>
            Only include spawns you have line of sight to
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bExactName">
            <summary>
            Match exact name rather than partial
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bTargetable">
            <summary>
            Include only targetable spawns
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.PlayerState">
            <summary>
            Bitmask of player states to include
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.Spawn">
            <summary>
            Return the first spawn matching the ID or Name filters (ignores all other filters)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertListType.bBanker">
            <summary>
            Include only bankers
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.AlertType">
            <summary>
            MQ2 type for an alert list (a list of spawn searches)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertType.List">
            <summary>
            Information about a spawn search on the alert list (0 based)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AlertType.Size">
            <summary>
            Number of spawn searches on the alert list
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.AltAbilityType">
            <summary>
            MQ2 type for an AA
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.Name">
            <summary>
            Name of the ability
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.ShortName">
            <summary>
            Short name of the ability
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.Description">
            <summary>
            Description as it appears in the AA window
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.ID">
            <summary>
            ID of the ability, for use with /alt activate
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.ReuseTime">
            <summary>
            Reuse time in seconds
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.MyReuseTime">
            <summary>
            Reuse time in seconds after modifiers have been applied
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.MinLevel">
            <summary>
            Minimum level to train
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.Cost">
            <summary>
            Base cost to train
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.Spell">
            <summary>
            Spell used by the ability (if any)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.RequiresAbility">
            <summary>
            Required ability (if any)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.RequiresAbilityPoints">
            <summary>
            Points required in <see cref="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.RequiresAbility"/>
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.MaxRank">
            <summary>
            Max rank available in this ability
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.Rank">
            <summary>
            Current rank in this ability
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.AARankRequired">
            <summary>
            Deprecated, use <see cref="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.Rank"/>
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.Type">
            <summary>
            Type (1-6) TODO: Document properly
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.Flags">
            <summary>
            TODO: Document properly
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.Expansion">
            <summary>
            TODO: Document properly
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.Passive">
            <summary>
            True if the ability does not require activation
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.PointsSpent">
            <summary>
            Returns the amount of points spent on an AA
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.Index">
            <summary>
            TODO: What is AltAbilityType.Index
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.CanTrain">
            <summary>
            Returns true/false on if the Alternative Ability can be trained
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AltAbilityType.NextIndex">
            <summary>
            Returns the next index number of the Alternative Ability
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.ArgbType">
            <summary>
            MQ2 type for a colour
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.ArgbType.op_Implicit(MQ2DotNet.MQ2API.DataTypes.ArgbType)~System.Drawing.Color">
            <summary>
            Implicit conversion to a .NET colour type
            </summary>
            <param name="typeVar"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.ArrayType">
            <summary>
            MQ2 array type. Not well supported
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.AugType">
            <summary>
            MQ2 type for an augmentation slot on an item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AugType.Slot">
            <summary>
            Slot number of the augment on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AugType.Type">
            <summary>
            Type of the augmentation
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AugType.Visible">
            <summary>
            TODO: What does AugType.Visible mean?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AugType.Infusable">
            <summary>
            TODO: What does AugType.Infusable mean?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AugType.Empty">
            <summary>
            True if the slot is empty
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AugType.Name">
            <summary>
            Name of the augmentation in the slot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AugType.Item">
            <summary>
            Item in the augmentation slot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AugType.Solvent">
            <summary>
            Solvent required to remove the augmentation
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.AuraType">
            <summary>
            MQ2 type for an aura
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AuraType.ID">
            <summary>
            Appears to be the slot the aura is in. 1 based
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AuraType.Find">
            <summary>
            Returns the position of the index if found within the aura's name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AuraType.Name">
            <summary>
            Name of the aura
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.AuraType.SpawnID">
            <summary>
            Spawn ID of the caster
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.AuraType.Remove">
            <summary>
            Remove the aura
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.BandolierItemType">
            <summary>
            MQ2 type for an item in a bandolier set
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BandolierItemType.Index">
            <summary>
            0 based index of the item in the set
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BandolierItemType.IconID">
            <summary>
            Icon ID of the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BandolierItemType.ID">
            <summary>
            Item ID
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BandolierItemType.Name">
            <summary>
            Name of the item
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.BandolierType">
            <summary>
            MQ2 type for a bandolier item set
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BandolierType.Active">
            <summary>
            Is the set active, i.e. worn?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BandolierType.Index">
            <summary>
            1 based index of the set in the window
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BandolierType.Item">
            <summary>
            Item in the set by index (1 - 4)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BandolierType.Name">
            <summary>
            Name of the set
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.BandolierType.Activate">
            <summary>
            Activate (equip) the set
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.BenchmarkType">
            <summary>
            MQ2 type for a benchmark. This does not seem to be implemented.
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.BodyType">
            <summary>
            MQ2 type for the body type of a spawn
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BodyType.ID">
            <summary>
            ID of the body type, internal use only?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BodyType.Name">
            <summary>
            Description e.g. Humanoid
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.BoolType">
            <summary>
            MQ2 type for a boolean
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.BoolType.op_Implicit(MQ2DotNet.MQ2API.DataTypes.BoolType)~System.Boolean">
            <summary>
            Implicit conversion to a bool
            </summary>
            <param name="typeVar"></param>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.CachedBuffType">
            <summary>
            MQ2 type for a cached buff (i.e. a buff that's been "remembered" after you've targeted another spawn
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CachedBuffType.CasterName">
            <summary>
            Memory address of the SPELLBUFF struct
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CachedBuffType.Count">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CachedBuffType.Slot">
            <summary>
            The ID of the buff or shortbuff slot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CachedBuffType.SpellID">
            <summary>
            Id of the spell
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CachedBuffType.Duration">
            <summary>
            The time remaining before the buff fades (not total duration)
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.BuffType">
            <summary>
            MQ2 type for a buff on the local character
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BuffType.Address">
            <summary>
            Memory address of the SPELLBUFF struct
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BuffType.ID">
            <summary>
            The ID of the buff or shortbuff slot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BuffType.Level">
            <summary>
            The level of the person that cast the buff on you (not the level of the spell)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BuffType.Spell">
            <summary>
            The spell
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BuffType.Mod">
            <summary>
            The modifier to a bard song
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BuffType.Duration">
            <summary>
            The time remaining before the buff fades (not total duration)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BuffType.Dar">
            <summary>
            The remaining damage absorption of the buff (if any)
            This is not entirely accurate, it will only show you to the Dar of your spell when it was initially cast, or what it was when you last zoned (whichever is more recent)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BuffType.TotalCounters">
            <summary>
            Total number of counters (disease, poison, curse, corruption) added by the buff
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BuffType.CountersDisease">
            <summary>
            Total number of counters disease added by the buff
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BuffType.CountersPoison">
            <summary>
            Total number of counters poison added by the buff
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BuffType.CountersCurse">
            <summary>
            Total number of counters curse added by the buff
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BuffType.CountersCorruption">
            <summary>
            Total number of counters corruption added by the buff
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.BuffType.HitCount">
            <summary>
            Number of hit counts remaining on the buff
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.BuffType.Remove">
            <summary>
            Remove the buff
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.ByteType">
            <summary>
            MQ2 type for a byte
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.ByteType.op_Implicit(MQ2DotNet.MQ2API.DataTypes.ByteType)~System.Byte">
            <summary>
            Implicit conversion to a byte
            </summary>
            <param name="typeVar"></param>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.CastType">
            <summary>
            MQ2 type from the MQ2Cast plugin
            TODO: Invalidate this and make member calls throw if MQ2Cast isn't loaded
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CastType.Active">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CastType.Effect">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CastType.Stored">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CastType.Timing">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CastType.Status">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CastType.Result">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CastType.Return">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CastType.Ready">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CastType.Taken">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.CharacterType">
            <summary>
            MQ2 type for the local player character
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.CharacterType.AbilityReady">
            <summary>
            Ability with this name or on this button # ready?
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.CharacterType.AltAbility">
            <summary>
            Returns an alt ability by name or number
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.CharacterType.AltAbilityReady">
            <summary>
            Alt ability ready by name or number
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.CharacterType.AltAbilityTimer">
            <summary>
            Alt ability reuse time remaining by name or number
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.CharacterType.Aura">
            <summary>
            Aura by name or slot #
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.CharacterType.Book">
            <summary>
            Spell in your spellbook by slot number, or slot in your spellbook by spell name
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.CharacterType.Buff">
            <summary>
            Buff by name or slot number
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.CharacterType.CombatAbility">
            <summary>
            Combat ability spell by number, or number by name
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.CharacterType.CombatAbilityReady">
            <summary>
            Combat ability ready by name or number
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.CharacterType.CombatAbilityTimer">
            <summary>
            Combat ability reuse time remaining by name or number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AAExp">
            <summary>
            AA exp as a raw number out of 330 (330=100%)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AAPoints">
            <summary>
            Unused AA points
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AAPointsAssigned">
            <summary>
            Number of points that have been assigned to an ability
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AAPointsSpent">
            <summary>
            The number of points you have spent on AA abilities
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AAPointsTotal">
            <summary>
            The total number of AA points you have
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AAVitality">
            <summary>
            The total number of AA Vitality you have
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Ability">
            <summary>
            The doability button number that the skill name is on, or the skill name assigned to a doability button
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AccuracyBonus">
            <summary>
            Accuracy bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.ActiveDisc">
            <summary>
            Returns a spell if melee discipline is active.
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.ActiveFavorCost">
            <summary>
            If Tribute is active, how much it is costing you every 10 minutes. Returns NULL if tribute is inactive.
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Aego">
            <summary>
            Buff from the Aegolism line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AggroLock">
            <summary>
            Spawn info for aggro lock player
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AGI">
            <summary>
            Agility
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.CharacterType.AltCurrency">
            <summary>
            Quantity of an alt currency by name or number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AltTimerReady">
            <summary>
            Don't use this
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AmIGroupLeader">
            <summary>
            Am I the group leader?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AssistComplete">
            <summary>
            Returns true/false if the assist is complete
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AttackBonus">
            <summary>
            Attack bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AttackSpeed">
            <summary>
            Your Attack Speed. No haste spells/items = AttackSpeed of 100. A 41% haste item will result in an AttackSpeed of 141. This variable does not take into account spell or song haste
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AutoFire">
            <summary>
            Is Autofire on?
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.CharacterType.AutoSkill">
            <summary>
            Autoskill by number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.AvoidanceBonus">
            <summary>
            Avoidance bonus from gear/spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Bank">
            <summary>
            Item in this bankslot #
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.BardSongPlaying">
            <summary>
            True if you're currently playing a bard song
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.BaseAGI">
            <summary>
            Base agility
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.BaseCHA">
            <summary>
            Base charisma
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.BaseDEX">
            <summary>
            Base dexterity
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.BaseINT">
            <summary>
            Base intelligence
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.BaseSTA">
            <summary>
            Base stamina
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.BaseSTR">
            <summary>
            Base strength
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.BaseWIS">
            <summary>
            Base wisdom
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Beneficial">
            <summary>
            First beneficial buff on character
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.BoundLocation">
            <summary>
            Bind location, valid indexes are 0 - 4
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Brells">
            <summary>
            Buff from the Brells line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CareerFavor">
            <summary>
            Career favor/tribute
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Cash">
            <summary>
            Total cash on your character, expressed in coppers (eg. if you are carrying 100pp, Cash will return 100000)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CashBank">
            <summary>
            Total cash in your bank, expressed in coppers
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CHA">
            <summary>
            Charisma
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Charmed">
            <summary>
            Debuff with a charm SPA
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Chronobines">
            <summary>
            Chronobines on your character
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.ClairvoyanceBonus">
            <summary>
            Clairvoyance Bonus
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Clarity">
            <summary>
            Buff from the Clarity line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Combat">
            <summary>
            Is auto attack turned on?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CombatEffectsBonus">
            <summary>
            Combat Effects bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CombatState">
            <summary>
            Returns one of the following: COMBAT, DEBUFFED, COOLDOWN, ACTIVE, RESTING, UNKNOWN
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Commemoratives">
            <summary>
            Commemorative Coins (alt currency)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Copper">
            <summary>
            Copper on your character
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CopperBank">
            <summary>
            Copper in your bank
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Corrupted">
            <summary>
            The buff on you, if any, that is increasing your corruption counter
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CountBuffs">
            <summary>
            Number of buffs you have, not including short duration buffs (songs)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CountersCorruption">
            <summary>
            Total number of corruption counters
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CountersCurse">
            <summary>
            Total number of curse counters
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CountersDisease">
            <summary>
            Total number of disease counters
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CountersPoison">
            <summary>
            Total number of poison counters
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CountSongs">
            <summary>
            Number of short duration buffs (songs) you have
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Crippled">
            <summary>
            Debuff from the Cripple line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CurrentEndurance">
            <summary>
            Current endurance
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CurrentFavor">
            <summary>
            Current favor/tribute
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CurrentHPs">
            <summary>
            Current hit points
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CurrentMana">
            <summary>
            Current mana
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CurrentWeight">
            <summary>
            Current weight
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Cursed">
            <summary>
            The buff on you, if any, that is increasing your cursed counter
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CursorCopper">
            <summary>
            Copper on your cursor
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CursorGold">
            <summary>
            Gold on your cursor
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CursorKrono">
            <summary>
            Krono on your cursor
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CursorPlatinum">
            <summary>
            Platinum on your cursor
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.CursorSilver">
            <summary>
            Silver on your cursor
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.DamageShieldBonus">
            <summary>
            Damage Shield bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.DamageShieldMitigationBonus">
            <summary>
            Damage Shield Mitigation bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Dar">
            <summary>
            Damage absorption remaining (eg. from Rune-type spells)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.DEX">
            <summary>
            Dexterity
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Diseased">
            <summary>
            The buff on you, if any, that is increasing your disease counter
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.DoTShieldBonus">
            <summary>
            DoT Shield bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Doubloons">
            <summary>
            Doubloons (alt currency)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Downtime">
            <summary>
            Ticks remaining before able to rest
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Drunk">
            <summary>
            Drunkenness level (0 - 200)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.DSed">
            <summary>
            The buff on you, if any, that is increasing your damage shield
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.EbonCrystals">
            <summary>
            Ebon Crystals (alt currency)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.EnduranceBonus">
            <summary>
            Endurance bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.EnduranceRegen">
            <summary>
            Endurance regen from the last tick
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.EnduranceRegenBonus">
            <summary>
            Endurance regen bonus
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.EnergyCrystals">
            <summary>
            Energy Crystals (alt currency)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Exp">
            <summary>
            Experience (out of 330)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.ExpansionFlags">
            <summary>
            Bit mask of expansions owned
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Faycites">
            <summary>
            Faycitum (alt currency)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Fellowship">
            <summary>
            Fellowship character is in
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Fists">
            <summary>
            Fists of Bayle (alt currency)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Focus">
            <summary>
            Buff from the Focus line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.FreeBuffSlots">
            <summary>
            Number of free buff slots remaining
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.FreeInventory">
            <summary>
            Number of free inventory slots remaining
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Gem">
            <summary>
            The gem number that a spell name is memorized in, or the spell in a gem number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.GemTimer">
            <summary>
            Recast time remaining on a spell gem by number or spell name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Gold">
            <summary>
            Gold on your character
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.GoldBank">
            <summary>
            Gold in your bank
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.GroupAssistTarget">
            <summary>
            Target of the group's main assist
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Grouped">
            <summary>
            True if in a group with a player or a mercenary
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.GroupList">
            <summary>
            Not working
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.GroupMarkNPC">
            <summary>
            Current group marked NPC (1 - 3)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.GroupSize">
            <summary>
            Number of characters in group, including yourself. Returns null if not in a group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Growth">
            <summary>
            Buff with a growth SPA
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.GuildID">
            <summary>
            ID number of your guild
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.GukEarned">
            <summary>
            Total points earned in Deepest Guk LDoN missions
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Haste">
            <summary>
            Total Combined Haste (worn and spell) as shown in Inventory Window stats
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Hasted">
            <summary>
            Buff from the Haste line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.HaveExpansion">
            <summary>
            Returns TRUE/FALSE if you have that expansion #
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.HealAmountBonus">
            <summary>
            Total Heal Amount bonus from gear
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.HeroicAGIBonus">
            <summary>
            Total Heroic Agility bonus from gear
            Increases endurance pool, endurance regen, and the maximum amount of endurance regen a character can have
            Also increases the chance to dodge an attack, grants a bonus to defense skill, and reduces falling damage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.HeroicCHABonus">
            <summary>
            Total Heroic Charisma bonus from gear
            Improves reaction rolls with some NPCs and increases the amount of faction you gain or lose when faction is adjusted
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.HeroicDEXBonus">
            <summary>
            Total Heroic Dexterity bonus from gear
            Increases endurance pool, endurance regen, and the maximum amount of endurance regen a character can have
            Also increases damage done by ranged attacks, improves chance to successfully assassinate or headshot, and improves the chance to riposte, block, and parry incoming attacks
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.HeroicINTBonus">
            <summary>
            Total Heroic Intelligence bonus from gear
            Increases mana pool, mana regen, and the maximum amount of mana regen an int-based caster can have
            It requires +25 heroic intel to gain a single point of +mana regeneration
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.HeroicSTABonus">
            <summary>
            Total Heroic Stamina bonus from gear
            Increases hit point pool, hit point regen, and the maximum amount of hit point regen a character can have
            Also increases endurance pool, endurance regen, and the maximum amount of endurance regen a character can have.
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.HeroicSTRBonus">
            <summary>
            Total Heroic Strength bonus from gear
            Increases endurance pool, endurance regen, and the maximum amount of endurance regen a character can have
            Also increases damage done by melee attacks and improves the bonus granted to armor class while using a shield
            (10 Heroic STR increases each Melee Hit by 1 point)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.HeroicWISBonus">
            <summary>
            Total Heroic Wisdom bonus from gear
            Increases mana pool, mana regen, and the maximum amount of mana regen a wis-based caster can have
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.HPBonus">
            <summary>
            Hit point bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.HPRegen">
            <summary>
            Hit point regeneration from last tick
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.HPRegenBonus">
            <summary>
            HP regen bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Hunger">
            <summary>
            Hunger level
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.HybridHP">
            <summary>
            Buff from the Hybrid HP line TODO What is this
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.InInstance">
            <summary>
            Are you in an instanced zone?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Instance">
            <summary>
            Instance you are in
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.INT">
            <summary>
            Intelligence
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Inventory">
            <summary>
            An item from your inventory by slot name or number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.ItemReady">
            <summary>
            Is an item ready to cast?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Krono">
            <summary>
            Krono on your character
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LADelegateMA">
            <summary>
            Level of Delegate MA of the current group leader (not your own ability level)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LADelegateMarkNPC">
            <summary>
            Level of Delegate Mark NPC of the current group leader (not your own ability level)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LAFindPathPC">
            <summary>
            Level of Find Path PC of the current group leader (not your own ability level)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LAHealthEnhancement">
            <summary>
            Level of Health Enhancement of the current group leader (not your own ability level)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LAHealthRegen">
            <summary>
            Level of Health Regen of the current group leader (not your own ability level)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LAHoTT">
            <summary>
            Level of HoTT of the current group leader (not your own ability level)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LAInspectBuffs">
            <summary>
            Level of Inspect Buffs of the current group leader (not your own ability level)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LAManaEnhancement">
            <summary>
            Level of Mana Enhancement of the current group leader (not your own ability level)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LAMarkNPC">
            <summary>
            Level of Mark NPC of the current group leader (not your own ability level)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Language">
            <summary>
            Language name by number, or number by name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LanguageSkill">
            <summary>
            Language skill by name or number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LANPCHealth">
            <summary>
            Level of NPC Health of the current group leader (not your own ability level)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LAOffenseEnhancement">
            <summary>
            Level of Offense Enhancement of the current group leader (not your own ability level)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LargestFreeInventory">
            <summary>
            Size of your largest free inventory slot (4 = Giant)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LASpellAwareness">
            <summary>
            Level of Spell Awareness of the current group leader (not your own ability level)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LDoNPoints">
            <summary>
            Total points earned across all LDoN missions
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Maloed">
            <summary>
            Debuff from the Malo line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.ManaBonus">
            <summary>
            Mana bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.ManaRegen">
            <summary>
            Mana regeneration from last tick
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.ManaRegenBonus">
            <summary>
            Mana regen bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.MaxBuffSlots">
            <summary>
            Maximum number of buffs you can have
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.MaxEndurance">
            <summary>
            Max endurance
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.MaxHPs">
            <summary>
            Max hit points
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.MaxMana">
            <summary>
            Max mana
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.MercAAExp">
            <summary>
            Mercenary AA experience, out of 1000
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.MercAAPoints">
            <summary>
            Number of mercenary AA points available to spend
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.MercAAPointsSpent">
            <summary>
            Number of mercenary AA points spent
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Mercenary">
            <summary>
            The state of your Mercenary, ACTIVE, SUSPENDED, or UNKNOWN (If it's dead). Returns NULL if you do not have a Mercenary.
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.MercenaryStance">
            <summary>
            Current active mercenary stance as a string, default is NULL.
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.CharacterType.MercList">
            <summary>
            Merc list description by name, or number by description
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Mezzed">
            <summary>
            Debuff from the Mez line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.MirEarned">
            <summary>
            Total points earned in Miragul's LDoN missions
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.MMEarned">
            <summary>
            Total points earned in Mistmoore LDoN missions
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Moving">
            <summary>
            Moving? (including strafe)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Name">
            <summary>
            First name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Nobles">
            <summary>
            Nobles (alt currency)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.NumGems">
            <summary>
            Returns the amount of spell gems your toon has
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Orux">
            <summary>
            Orux (alt currency)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.PctAAExp">
            <summary>
            Current AA experience as a percentage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.PctAAVitality">
            <summary>
            Current AA vitality as a percentage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.PctAggro">
            <summary>
            Your aggro percentage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.PctEndurance">
            <summary>
            Current endurance as a percentage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.PctExp">
            <summary>
            Current experience as a percentage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.PctExpToAA">
            <summary>
            Percentage of your experience going to AA
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.PctHPs">
            <summary>
            Current hit points as a percentage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.PctMana">
            <summary>
            Current mana as a percentage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.PctMercAAExp">
            <summary>
            Current mercenary AA experience as a oercentage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.PctVitality">
            <summary>
            Current vitality as a percentage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.PetBuff">
            <summary>
            A buff on your pet by slot number, or a slot number by buff name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Phosphenes">
            <summary>
            Phosphenes (alt currency)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Phosphites">
            <summary>
            Phosphites (alt currency)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.PiecesofEight">
            <summary>
            Pieces of Eight (alt currency)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Platinum">
            <summary>
            Platinum on your character
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.PlatinumBank">
            <summary>
            Platinum in your bank
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.PlatinumShared">
            <summary>
            Platinum in your shared bank
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Poisoned">
            <summary>
            The buff on you, if any, that is increasing your poison counter
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Pred">
            <summary>
            Buff from the Pred line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.RadiantCrystals">
            <summary>
            Radiant Crystals (alt currency)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.RaidAssistTarget">
            <summary>
            Current raid assist target (1-3)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.RaidMarkNPC">
            <summary>
            Current raid marked NPC (1-3)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.RangedReady">
            <summary>
            Ranged attack ready?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Regen">
            <summary>
            Buff from the Regen line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.RevDSed">
            <summary>
            Buff with a reverse damage shield SPA
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Rooted">
            <summary>
            Buff with a root SPA
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.RujEarned">
            <summary>
            Total points earned in Rujurkian LDoN missions
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Running">
            <summary>
            Do I have auto-run turned on?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.SE">
            <summary>
            Buff from the Spiritual Enlightenment line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.SecondaryAggroPlayer">
            <summary>
            Spawn that has secondary aggro
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.SecondaryPctAggro">
            <summary>
            Secondary aggro as a percentage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.ShieldingBonus">
            <summary>
            Shielding bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Shining">
            <summary>
            Buff from the Shining line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Shrouded">
            <summary>
            Am I Shrouded?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Silver">
            <summary>
            Silver on your character
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.SilverBank">
            <summary>
            Silver in your bank
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Skill">
            <summary>
            Skill level by name or number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.SkillBase">
            <summary>
            Skill base level by name or number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.SkillCap">
            <summary>
            Skill cap by name or number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Skin">
            <summary>
            Buff from the Skin line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Slowed">
            <summary>
            Debuff with a slow SPA
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Snared">
            <summary>
            Debuff with a snare SPA
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Song">
            <summary>
            Song (short buff) by name or slot number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.SPA">
            <summary>
            Returns the total amount of an SPA your character has
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Spawn">
            <summary>
            The character's spawn
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.SpellDamageBonus">
            <summary>
            Spell Damage bonus
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.SpellInCooldown">
            <summary>
            Returns TRUE if you have a spell in cooldown and FALSE when not.
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.SpellReady">
            <summary>
            Indiciates if a spell is ready, by spell name or gem number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.SpellShieldBonus">
            <summary>
            Spell Shield bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.STA">
            <summary>
            Stamina
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.STR">
            <summary>
            Strength
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Strength">
            <summary>
            Buff from the Strength line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.StrikeThroughBonus">
            <summary>
            Strikethrough bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Stunned">
            <summary>
            Am I stunned?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.StunResistBonus">
            <summary>
            Stun Resist bonus from gear and spells
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Subscription">
            <summary>
            Subscription type GOLD, FREE, (Silver?)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.SV">
            <summary>
            Buff from the Spiritual Vivacity line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.svChromatic">
            <summary>
            Your character's lowest resist
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.svCold">
            <summary>
            Cold resist
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.svCorruption">
            <summary>
            Corruption resist
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.svDisease">
            <summary>
            Disease resist
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.svFire">
            <summary>
            Fire resist
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.svMagic">
            <summary>
            Magic resist
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.svPoison">
            <summary>
            Poison resist
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.svPrismatic">
            <summary>
            The average of your character's resists
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Symbol">
            <summary>
            Buff from the Symbol line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.TakEarned">
            <summary>
            Total points earned in Takish LDoN missions
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.TargetOfTarget">
            <summary>
            Your target's target
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Tashed">
            <summary>
            Debuff from the Tash line
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Thirst">
            <summary>
            Thirst level
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.TotalCounters">
            <summary>
            Total number of counters on you
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.TributeActive">
            <summary>
            Personal tribute currently active?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.TributeTimer">
            <summary>
            Personal tribute timer
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.UseAdvancedLooting">
            <summary>
            Using advanced looting?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Vitality">
            <summary>
            Current vitality
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.WIS">
            <summary>
            Wisdom
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.XTAggroCount">
            <summary>
            Number of mobs on your XTarget, excluding your current target, that have less than the supplied % of aggro on you
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.XTarget">
            <summary>
            Returns a spawn from your XTarget by index (1 - 13)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.XTargetCount">
            <summary>
            Number of spawns on your XTarget (note this is .NET only, equivalent in MQ2 XTarget without an index
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.XTargetSlots">
            <summary>
            Number of slots available in your XTarget window
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.XTHaterCount">
            <summary>
            Number of spawns in auto hater slots in your XTarget
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.ZoneBound">
            <summary>
            Zone you are bound in
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.ZoneBoundX">
            <summary>
            X location of your bind point
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.ZoneBoundY">
            <summary>
            Y location of your bind point
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.ZoneBoundZ">
            <summary>
            Z location of your bind point
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Zoning">
            <summary>
            Am I zoning?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Bandolier">
            <summary>
            Bandolier set by slot number (1 - 20) or name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.LCK">
            <summary>
            Luck
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.BlockedBuff">
            <summary>
            Blocked buff by index, valid index are 1 - 40
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.BlockedPetBuff">
            <summary>
            Blocked pet buff by index, valid index are 1 - 40
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Feared">
            <summary>
            Fear debuff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Silenced">
            <summary>
            Silence debuff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Invulnerable">
            <summary>
            Invulnerability buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharacterType.Dotted">
            <summary>
            DoT debuff if the target has one
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.CharacterType.Stand">
            <summary>
            Equivalent of the command /stand on
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.CharacterType.Sit">
            <summary>
            Equivalent of the command /sit on
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.CharacterType.Dismount">
            <summary>
            Equivalent of the command /dismount
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.CharacterType.StopCast">
            <summary>
            Equivalent of the command /stopcast
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.CharSelectListType">
            <summary>
            MQ2 type for the character in the select list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharSelectListType.Name">
            <summary>
            Character's name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharSelectListType.Level">
            <summary>
            Character's level
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharSelectListType.ZoneID">
            <summary>
            ID of the zone the character is in
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharSelectListType.Count">
            <summary>
            Total number of characters in the character select list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharSelectListType.Class">
            <summary>
            Character's class
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CharSelectListType.Race">
            <summary>
            Character's race
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.ClassType">
            <summary>
            MQ2 type for a character class
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ClassType.ID">
            <summary>
            TODO: What is this
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ClassType.Name">
            <summary>
            Full name of the class e.g. Cleric
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ClassType.ShortName">
            <summary>
            3 letter name e.g. CLR
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ClassType.CanCast">
            <summary>
            Can cast spells, including Bard
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ClassType.PureCaster">
            <summary>
            Any one of: Cleric, Druid, Shaman, Necromancer, Wizard, Mage, Enchanter
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ClassType.PetClass">
            <summary>
            Any one of: Shaman, Necromancer, Mage, Beastlord
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ClassType.DruidType">
            <summary>
            Druid/Ranger?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ClassType.ShamanType">
            <summary>
            Shaman/Beastlord?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ClassType.NecromancerType">
            <summary>
            Necromancer/Shadow Knight?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ClassType.ClericType">
            <summary>
            Cleric/Paladin?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ClassType.HealerType">
            <summary>
            Cleric/Druid/Shaman?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ClassType.MercType">
            <summary>
            Mercenary?
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.ClassType.op_Implicit(MQ2DotNet.MQ2API.DataTypes.ClassType)~System.Nullable{MQ2DotNet.EQ.Class}">
            <summary>
            Implicit conversion to a Class enumeration
            </summary>
            <param name="typeVar"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.CorpseType">
            <summary>
            MQ2 type for a corpse
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CorpseType.Open">
            <summary>
            Corpse open?
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.CorpseType.Item">
            <summary>
            An item on the corpse by name or number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CorpseType.Items">
            <summary>
            Number of items on the corpse
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType">
            <summary>
            MQ2 type for the current zone
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType.Address">
            <summary>
            Memory address of the TODO: struct
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType.ID">
            <summary>
            ID of the zone
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType.Name">
            <summary>
            Full name of the zone e.g. "The Plane of Knowledge"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType.ShortName">
            <summary>
            Short name of the zone e.g. "PoKnowledge"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType.Type">
            <summary>
            TODO: Description
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType.Gravity">
            <summary>
            Value of gravity in the zone
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType.SkyType">
            <summary>
            Type of sky in the zone
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType.MinClip">
            <summary>
            Minimum setting for far clip plane
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType.MaxClip">
            <summary>
            Maximum setting for far clip plane
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType.ZoneType">
            <summary>
            Zone type:0=Indoor Dungeon 1=Outdoor 2=Outdoor City 3=Dungeon City 4=Indoor City 5=Outdoor Dungeon
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType.Dungeon">
            <summary>
            Is the zone a dungeon, i.e. mounts cannot be used
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType.Indoor">
            <summary>
            Is the zone indoors, i.e. mounts cannot be used
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType.Outdoor">
            <summary>
            Is the zone outdoors, i.e. mounts can be used
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.CurrentZoneType.NoBind">
            <summary>
            Binding in the zone is disabled TODO: For melee only or everyone?
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.DeityType">
            <summary>
            MQ2 type for a deity
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.DeityType.ID">
            <summary>
            ID of the deity
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.DeityType.Name">
            <summary>
            Name of the deity e.g. Innoruuk
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.DeityType.Team">
            <summary>
            Team, one of "good", "evil", "neutral", "none"
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.DoubleType">
            <summary>
            MQ2 type for a double precision float
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.DoubleType.op_Implicit(MQ2DotNet.MQ2API.DataTypes.DoubleType)~System.Nullable{System.Double}">
            <summary>
            Implicit conversion to double
            </summary>
            <param name="typeVar"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.DynamicZoneType">
            <summary>
            MQ2 type for a dynamic zone
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.DynamicZoneType.Name">
            <summary>
            The full name of the dynamic zone
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.DynamicZoneType.Members">
            <summary>
            Current number of characters in the dynamic zone
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.DynamicZoneType.MaxMembers">
            <summary>
            Maximum number of characters that can enter this dynamic zone
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.DynamicZoneType.Member">
            <summary>
            Member of the dynamic zone by name or number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.DynamicZoneType.Leader">
            <summary>
            The leader of the dynamic zone
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.DynamicZoneType.InRaid">
            <summary>
            TODO: Document DynamicZoneType.InRaid
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.DZMemberType">
            <summary>
            MQ2 type for a member of a dynamic zone
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.DZMemberType.Name">
            <summary>
            The name of the member
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.DZMemberType.Status">
            <summary>
            The status of the member - one of the following: Unknown, Online, Offline, In Dynamic Zone, Link Dead
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.EverQuestType">
            <summary>
            MQ2 type for general game information
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.GameState">
            <summary>
            Current game state, one of "PRECHARSELECT", "CHARSELECT", "INGAME", "UNKNOWN"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.LoginName">
            <summary>
            Username of your account name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.Server">
            <summary>
            Name of the server in short form e.g. firiona
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.LastCommand">
            <summary>
            Last command executed
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.LastTell">
            <summary>
            Name of the person you last received a tell from
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.Running">
            <summary>
            Number of clock ticks this instance of eqgame.exe has been running for
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.MouseX">
            <summary>
            X (horizontal) coordinate of the mouse cursor in UI coordinate space, relative to the left edge of the game window
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.MouseY">
            <summary>
            Y (vertical) coordinate of the mouse cursor in UI coordinate space relative to the top edge of the game window
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.Ping">
            <summary>
            Ping time to the EQ server in milliseconds
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.ChatChannels">
            <summary>
            Number of chat channels you are in
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.ChatChannel">
            <summary>
            Name of a chat channel by number, or true/false if you are in a chat channel by name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.ViewportX">
            <summary>
            X (horizontal) start of viewport, always 0?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.ViewportY">
            <summary>
            Y (vertical) start of viewport, always 0?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.ViewportXMax">
            <summary>
            X (horizontal) end of viewport
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.ViewportYMax">
            <summary>
            Y (vertical) end of viewport
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.ViewportXCenter">
            <summary>
            X (horizontal) center of viewport
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.ViewportYCenter">
            <summary>
            Y (vertical) center of viewport
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.LClickedObject">
            <summary>
            TODO: Document EverQuestType.LClickedObject
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.WinTitle">
            <summary>
            Current window title
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.PID">
            <summary>
            Process ID of this eqgame.exe
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.ScreenMode">
            <summary>
            Screen mode, 2 = windowed ?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.PPriority">
            <summary>
            Process priority of this eqgame.exe, one of "LOW", "BELOW NORMAL", "NORMAL", "ABOVE NORMAL", "REALTIME"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.LayoutCopyInProgress">
            <summary>
            Is a /copylayout currently in progress?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.LastMouseOver">
            <summary>
            Window the mouse cursor was last over
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.CharSelectList">
            <summary>
            Character in the character select list by name or position (1 based)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.CurrentUI">
            <summary>
            Name of the current UI skin
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.IsDefaultUILoaded">
            <summary>
            True if using default UI skin
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.HWND">
            <summary>
            Handle to the window
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.Foreground">
            <summary>
            Is the window in the foreground?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EverQuestType.ValidLoc">
            <summary>
            Is the given location, in yxz format separated by spaces, a valid location in the current zone?
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.EvolvingItemType">
            <summary>
            MQ2 type for an evolving item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EvolvingItemType.ExpPct">
            <summary>
            Current percentage experience
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EvolvingItemType.ExpOn">
            <summary>
            Is experience enabled?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EvolvingItemType.Level">
            <summary>
            Current level of the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.EvolvingItemType.MaxLevel">
            <summary>
            Maximum level of the item
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.FellowshipMemberType">
            <summary>
            MQ2 type for a member of a fellowship
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipMemberType.Zone">
            <summary>
            Zone the member is currently in
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipMemberType.Level">
            <summary>
            Member's level
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipMemberType.Class">
            <summary>
            Member's class
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipMemberType.LastOn">
            <summary>
            How long since the member was last online
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipMemberType.Name">
            <summary>
            Member's name
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.FellowshipType">
            <summary>
            MQ2 type for a fellowship
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipType.ID">
            <summary>
            Fellowship ID
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipType.Leader">
            <summary>
            Fellowship leader's name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipType.MotD">
            <summary>
            Fellowship Message of the Day
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipType.Members">
            <summary>
            Number of members in the fellowship
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipType.xMember">
            <summary>
            Member data by name or #
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipType.CampfireDuration">
            <summary>
            Time left on current campfire
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipType.CampfireY">
            <summary>
            Campfire Y location
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipType.CampfireX">
            <summary>
            Campfire X location
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipType.CampfireZ">
            <summary>
            Campfire Z location
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipType.CampfireZone">
            <summary>
            Zone information for the zone that contains your campfire
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FellowshipType.Campfire">
            <summary>
            TRUE if campfire is up, FALSE if not
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.FloatType">
            <summary>
            MQ2 type for a single precision float
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.FloatType.op_Implicit(MQ2DotNet.MQ2API.DataTypes.FloatType)~System.Nullable{System.Single}">
            <summary>
            Implicit conversion to nullable float
            </summary>
            <param name="typeVar"></param>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.FriendsType">
            <summary>
            MQ2 type for the friends list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.FriendsType.Friend">
            <summary>
            Name of a friend by index (1 based) or true/false if a name is on your friend list
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.GroundType">
            <summary>
            MQ2 type for a ground object
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.GroundType.#ctor(MQ2DotNet.MQ2API.MQ2TypeFactory,System.IntPtr)">
            <summary>
            Create a new instance from a pointer to a GROUNDOBJECT struct
            </summary>
            <param name="mq2TypeFactory"></param>
            <param name="pGroundItem"></param>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.Address">
            <summary>
            Address of the GROUNDOBJECT struct
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.ID">
            <summary>
            Ground item ID (not the same as item ID, this is like spawn ID)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.SubID">
            <summary>
            TODO: Document GroundType.SubID
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.ZoneID">
            <summary>
            ID of the zone the spawn is in?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.W">
            <summary>
            X coordinate (Westward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.X">
            <summary>
            X coordinate (Westward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.N">
            <summary>
            Y coordinate (Northward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.Y">
            <summary>
            Y coordinate (Northward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.U">
            <summary>
            Z coordinate (Upward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.Z">
            <summary>
            Z coordinate (Upward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.Name">
            <summary>
            Internal name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.DisplayName">
            <summary>
            Display name as it appears on MQ2Map
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.Heading">
            <summary>
            Ground item is facing this heading
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.Distance">
            <summary>
            2D distance from character to the ground item in the XY plane
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.Distance3D">
            <summary>
            3D distance from character to the ground item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.HeadingTo">
            <summary>
            Direction player must move to meet this ground item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.LineOfSight">
            <summary>
            Returns TRUE if ground spawn is in line of sight
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.Next">
            <summary>
            Next ground spawn
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.Prev">
            <summary>
            Previous ground spawn
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.First">
            <summary>
            First ground spawn in the linked list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroundType.Last">
            <summary>
            Last ground spawn in the linked list
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.GroundType.Grab">
            <summary>
            Pick up the item (must be within 20 units of it)
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.GroupMemberType">
            <summary>
            MQ2 type for a member of a group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.Address">
            <summary>
            Memory address of the GROUPMEMBER struct
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.Name">
            <summary>
            The name of the group member. This works even if they are not in the same zone as you
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.Leader">
            <summary>
            TRUE if the member is the group's leader, FALSE otherwise
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.Spawn">
            <summary>
            Accesses the group member's spawn directly
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.Level">
            <summary>
            The member's level
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.MainTank">
            <summary>
            TRUE if the member is designated as the group's Main Tank, FALSE otherwise
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.MainAssist">
            <summary>
            TRUE if the member is designated as the group's Main Assist, FALSE otherwise
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.MarkNpc">
            <summary>
            TRUE if the member is designated as the Mark NPC role
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.MasterLooter">
            <summary>
            TRUE if the member is designated as the Master Looter role
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.Puller">
            <summary>
            TRUE if the member is designated as the Puller role
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.Mercenary">
            <summary>
            TRUE if the member is a mercenary, FALSE otherwise
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.PctAggro">
            <summary>
            Member's aggro percentage as shown in the group window
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.Index">
            <summary>
            Index (0 based) of the member in the group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.Offline">
            <summary>
            TRUE if the member is offline and FALSE if online
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.Present">
            <summary>
            TRUE if the member is online and in same zone and FALSE if online and not in same zone as you
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupMemberType.OtherZone">
            <summary>
            TRUE if the member is online but in another zone and FALSE if online and in same zone as you
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.GroupType">
            <summary>
            MQ2 type for the character's group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.Address">
            <summary>
            Memory address of the GROUPINFO struct
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.Member">
            <summary>
            A group member by name or number (0 - 5)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.Members">
            <summary>
            Total number of group members, excluding yourself
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.Leader">
            <summary>
            Data on the leader of the group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.GroupSize">
            <summary>
            Number of members in your group, including yourself
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.MainTank">
            <summary>
            Data on the main tank of the group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.MainAssist">
            <summary>
            Data on the main assist of the group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.Puller">
            <summary>
            Data on the puller of the group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.MarkNpc">
            <summary>
            Data on the mark NPCs role of the group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.MasterLooter">
            <summary>
            Data on the master looter of the group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.AnyoneMissing">
            <summary>
            TRUE if someone is missing in group, offline, in other zone or simply just dead
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.Present">
            <summary>
            Number of group members (excluding yourself) that are in zone and alive
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.MercenaryCount">
            <summary>
            Count of how many mercenaries are in your group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.TankMercCount">
            <summary>
            Count of how many Tank mercenaries are in your group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.HealerMercCount">
            <summary>
            Count of how many Healer mercenaries are in your group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.MeleeMercCount">
            <summary>
            Count of how many Melee DPS mercenaries are in your group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.CasterMercCount">
            <summary>
            Count of how many Caster DPS mercenaries are in your group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.AvgHPs">
            <summary>
            Average HP percentage of group members, including yourself
            </summary>
        </member>
        <member name="F:MQ2DotNet.MQ2API.DataTypes.GroupType.Injured">
            <summary>
            Will return the numbers of people in the group that has less than a certain percentage HP
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.XCleric">
            <summary>
            The first non-mercenary cleric in the group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.GroupType.MouseOver">
            <summary>
            Group member the mouse is currently over
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.HeadingType">
            <summary>
            MQ2 type for a heading
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.HeadingType.Clock">
            <summary>
            The nearest clock direction, e.g. 1-12
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.HeadingType.Degrees">
            <summary>
            Heading in degrees (same as casting to float). N = 0, E = 90, S = 180, W = 270
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.HeadingType.DegreesCCW">
            <summary>
            Heading in degrees, counter clockwise from north. N = 0, W = 90, S = 180, E = 270
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.HeadingType.ShortName">
            <summary>
            The short compass direction, eg. "S", "SSE"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.HeadingType.Name">
            <summary>
            The long compass direction, eg. "south", "south by southeast"
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.HeadingType.op_Implicit(MQ2DotNet.MQ2API.DataTypes.HeadingType)~System.Nullable{System.Single}">
            <summary>
            Implicit conversion to a nullable float
            </summary>
            <param name="typeVar"></param>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.Int64Type">
            <summary>
            MQ2 type for a 64 bit integer
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.Int64Type.op_Implicit(MQ2DotNet.MQ2API.DataTypes.Int64Type)~System.Nullable{System.Int64}">
            <summary>
            Implicit conversion to a nullable long
            </summary>
            <param name="typeVar"></param>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.IntType">
            <summary>
            MQ2 type for a 32 bit integer
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.IntType.op_Implicit(MQ2DotNet.MQ2API.DataTypes.IntType)~System.Nullable{System.Int32}">
            <summary>
            Implicit conversion to a nullable int
            </summary>
            <param name="typeVar"></param>
            <returns></returns>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.IntType.op_Implicit(MQ2DotNet.MQ2API.DataTypes.IntType)~System.Nullable{System.IntPtr}">
            <summary>
            Implicit conversion to a nullable IntPtr
            </summary>
            <param name="typeVar"></param>
            <returns></returns>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.IntType.op_Implicit(MQ2DotNet.MQ2API.DataTypes.IntType)~System.Nullable{MQ2DotNet.EQ.Class}">
            <summary>
            Implicit conversion to a Class enum
            </summary>
            <param name="typeVar"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.InvSlotType">
            <summary>
            MQ2 type for an inventory slot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.InvSlotType.ID">
            <summary>
            ID of this item slot (usable directly by /itemnotify)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.InvSlotType.Item">
            <summary>
            Item data for the item in this slot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.InvSlotType.Pack">
            <summary>
            Container that must be opened to access the slot with /itemnotify
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.InvSlotType.Slot">
            <summary>
            Slot number inside the pack which holds the item, otherwise NULL
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.InvSlotType.Name">
            <summary>
            For inventory slots not inside packs, the slot name, otherwise NULL
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.ItemFilterDataType">
            <summary>
            MQ2 type for a filter in advanced loot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemFilterDataType.Name">
            <summary>
            Name of the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemFilterDataType.ID">
            <summary>
            ID of the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemFilterDataType.AutoRoll">
            <summary>
            Auto roll enabled?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemFilterDataType.Need">
            <summary>
            Always need?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemFilterDataType.Greed">
            <summary>
            Always greed?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemFilterDataType.Never">
            <summary>
            Never?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemFilterDataType.IconID">
            <summary>
            Item's icon ID
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemFilterDataType.Types">
            <summary>
            Bitmask of settings, 1 = AutoRoll, 2 = Need, 4 = Greed, 8 = Never
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.ItemSpellType">
            <summary>
            MQ2 type for a spell effect on an item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemSpellType.SpellID">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemSpellType.RequiredLevel">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemSpellType.EffectType">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemSpellType.EffectiveCasterLevel">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemSpellType.MaxCharges">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemSpellType.CastTime">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemSpellType.TimerID">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemSpellType.RecastType">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemSpellType.ProcRate">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemSpellType.OtherName">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemSpellType.OtherID">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemSpellType.Spell">
            <summary>
            The spell
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.ItemType">
            <summary>
            MQ2 type for an item. This is used for both generic item information (ITEMINFO), and a specific item (CONTENTS)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.AC">
            <summary>
            AC value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Accuracy">
            <summary>
            Accuracy value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Address">
            <summary>
            Address of the ITEMINFO struct
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.AGI">
            <summary>
            AGI value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Attack">
            <summary>
            Attack value on item
            </summary>
            
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Attuneable">
            <summary>
            Attuneable?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.AugRestrictions">
            <summary>
            Augment Restrictions
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Augs">
            <summary>
            Number of augs on this item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.AugSlot">
            <summary>
            Augment slots on the item (0 - 5)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.AugSlot1">
            <summary>
            Type of the 1st aug slot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.AugSlot2">
            <summary>
            Type of the 2nd aug slot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.AugSlot3">
            <summary>
            Type of the 3rd aug slot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.AugSlot4">
            <summary>
            Type of the 4th aug slot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.AugSlot5">
            <summary>
            Type of the 5th aug slot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.AugSlot6">
            <summary>
            Type of the 6th aug slot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.AugType">
            <summary>
            Type of slot the item fits in, if it is an augment
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Avoidance">
            <summary>
            Avoidance value on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.BuyPrice">
            <summary>
            The cost to buy this item from the active merchant
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.CanUse">
            <summary>
            Usable by character
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.CastTime">
            <summary>
            Cast time on clicky ItemSpell
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.CHA">
            <summary>
            CHA value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Charges">
            <summary>
            Charges on the item TODO: Total or remaining charges?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Clairvoyance">
            <summary>
            Clairvoyance value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Class">
            <summary>
            Class that can use the item, by number (1 - Classes), or by class name or 3 letter code
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Classes">
            <summary>
            Number of classes that can use this item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Clicky">
            <summary>
            Clicky spell on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Collectible">
            <summary>
            Item is collectible?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.CombatEffects">
            <summary>
            CombatEffects value on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.ContAddress">
            <summary>
            Memory address of the CONTENTS struct
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Container">
            <summary>
            If the item is a container, the number of slots it has
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.ContentSize">
            <summary>
            Size of items that can be placed in the container (4 = Giant)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Damage">
            <summary>
            Damage value on the weapon
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.DamageShieldMitigation">
            <summary>
            Damage shield mitigation value on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.DamShield">
            <summary>
            Damage shield value on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Deities">
            <summary>
            Number of deities that can use the item. Returns 0 if there are no restrictions
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Deity">
            <summary>
            Deity that can use the item, by number (1 - Deities), or by name. Returns null if there are no restrictions
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.DEX">
            <summary>
            DEX value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.DMGBonusType">
            <summary>
            "None", "Magic", "Fire", "Cold", "Poison", "Disease"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.DoTShielding">
            <summary>
            DoT Shielding value on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.EffectType">
            <summary>
            Spell effect type (see below for spell effect types)
            Click Inventory - item has a right-click spell and can be cast from inventory
            Click Unknown - item has an unknown right-click effect restriction
            Click Worn - item has a right-click spell and must be equipped to click it
            Combat - weapon has a proc
            Spell Scroll - Scribeable spell scroll
            Worn - item has a focus effect
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Endurance">
            <summary>
            Endurance value on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.EnduranceRegen">
            <summary>
            Endurance regen value on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Evolving">
            <summary>
            Details about the evolving item, if it is one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Expendable">
            <summary>
            Is the item expendable?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Familiar">
            <summary>
            Familiar spell cast by the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.FirstFreeSlot">
            <summary>
            If the item is a container, the 1 based index of the first free slot in it
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Focus">
            <summary>
            Focus effect on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Focus2">
            <summary>
            Second focus effect on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.FreeStack">
            <summary>
            The number of items needed to fill all the stacks of the item you have
            If you have 3 stacks (1, 10, 20 in those stacks), you have room for 60 total and you have 31 on you, so FreeStack would return 29
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Haste">
            <summary>
            Haste value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HealAmount">
            <summary>
            Heal amount value on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Heirloom">
            <summary>
            Heirloom item?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HeroicAGI">
            <summary>
            Heroic AGI value on the item
            Increases endurance pool, endurance regen, and the maximum amount of endurance regen a character can have
            Also increases the chance to dodge an attack, grants a bonus to defense skill, and reduces falling damage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HeroicCHA">
            <summary>
            Heroic CHA value on the item
            Improves reaction rolls with some NPCs and increases the amount of faction you gain or lose when faction is adjusted
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HeroicDEX">
            <summary>
            Heroic DEX value on the item
            Increases endurance pool, endurance regen, and the maximum amount of endurance regen a character can have
            Also increases damage done by ranged attacks, improves chance to successfully assassinate or headshot, and improves the chance to riposte, block, and parry incoming attacks
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HeroicINT">
            <summary>
            Heroic INT value on the item
            Increases mana pool, mana regen, and the maximum amount of mana regen an int-based caster can have
            It requires +25 heroic intel to gain a single point of +mana regeneration
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HeroicSTA">
            <summary>
            Heroic STA value on the item
            Increases hit point pool, hit point regen, and the maximum amount of hit point regen a character can have
            Also increases endurance pool, endurance regen, and the maximum amount of endurance regen a character can have.
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HeroicSTR">
            <summary>
            Heroic STR value on the item
            Increases endurance pool, endurance regen, and the maximum amount of endurance regen a character can have
            Also increases damage done by melee attacks and improves the bonus granted to armor class while using a shield
            (10 Heroic STR increases each Melee Hit by 1 point)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HeroicSvCold">
            <summary>
            Don't use this
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HeroicSvCorruption">
            <summary>
            Don't use this
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HeroicSvDisease">
            <summary>
            Don't use this
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HeroicSvFire">
            <summary>
            Don't use this
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HeroicSvMagic">
            <summary>
            Don't use this
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HeroicSvPoison">
            <summary>
            Don't use this
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HeroicWIS">
            <summary>
            Heroic WIS value on the item
            Increases mana pool, mana regen, and the maximum amount of mana regen a wis-based caster can have
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HP">
            <summary>
            HP value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.HPRegen">
            <summary>
            HP Regen value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Icon">
            <summary>
            ID of the icon used for the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.ID">
            <summary>
            ID of the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Illusion">
            <summary>
            Illusion spell on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.InstrumentMod">
            <summary>
            Instrument Modifier Value
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.INT">
            <summary>
            INT value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.InvSlot">
            <summary>
            Inventory slot the item is in (not the slot it can be equipped in)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Item">
            <summary>
            If the item is a container, the item in the nth slot (1 based)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.ItemDelay">
            <summary>
            Weapon delay
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.ItemLink">
            <summary>
            just prints the actual hexlink for an item (not clickable)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Items">
            <summary>
            If the item is a container, the number of items in it
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.ItemSlot">
            <summary>
            Item slot number the item is currently in
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.ItemSlot2">
            <summary>
            If the item is in a container, the index (0 based) of the slot within the container
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.LDoNTheme">
            <summary>
            "All", "Deepest Guk", "Miragul's", "Mistmoore", "Rujarkian", "Takish", "Unknown"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Lore">
            <summary>
            Lore?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Magic">
            <summary>
            Magic?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Mana">
            <summary>
            Mana value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.ManaRegen">
            <summary>
            ManaRegen value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.MaxPower">
            <summary>
            Max power on a power source
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.MerchQuantity">
            <summary>
            Quantity of item active merchant has
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Mount">
            <summary>
            Mount spell on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Name">
            <summary>
            Name of the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.NoDestroy">
            <summary>
            No destroy?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.NoDrop">
            <summary>
            No drop?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.NoRent">
            <summary>
            No rent?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.NoTrade">
            <summary>
            No trade? Same as <see cref="P:MQ2DotNet.MQ2API.DataTypes.ItemType.NoDrop"/>
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Open">
            <summary>
            Item is a container and is open
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.OrnamentationIcon">
            <summary>
            Ornamentation icon
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.PctPower">
            <summary>
            Percentage power remaining on a power source
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Power">
            <summary>
            Power remaining on a power source
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Prestige">
            <summary>
            Prestige? (Usable only by gold accounts)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Proc">
            <summary>
            Proc on the weapon
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Purity">
            <summary>
            Purity value on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Quest">
            <summary>
            Quest item?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Race">
            <summary>
            Race that can use the item, by number (1 - Races), or by name (full name e.g. Froglok, not FRG)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Races">
            <summary>
            Number of races that can use the item. 16 if usable by all races
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Range">
            <summary>
            Range of a ranged weapon
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.RequiredLevel">
            <summary>
            Required level to wear the item. Items with no required level will return 0
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Scroll">
            <summary>
            Spell taught by the item if it is a scroll
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.SellPrice">
            <summary>
            Price to sell this item at this merchant if one is open
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Shielding">
            <summary>
            Shielding value on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Size">
            <summary>
            Item size (1 = Small, 2 = Medium, 3 = Large, 4 = Giant)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.SizeCapacity">
            <summary>
            If item is a container, the size of items it can hold (1 = Small, 2 = Medium, 3 = Large, 4 = Giant)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.SkillModMax">
            <summary>
            Maximum absolute value of the skill mod e.g. 36 for a Master Tailor Trophy
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.SkillModValue">
            <summary>
            Skill modifier value as a percentage e.g. 12 for a Master Tailor Trophy
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.SlotsUsedByItem">
            <summary>
            If the item is a container, the number of slots in it taken up by a given item name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Spell">
            <summary>
            Spell effect
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.SpellDamage">
            <summary>
            Spell damage value on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.SpellShield">
            <summary>
            Spell shield value on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.STA">
            <summary>
            STA value on the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Stack">
            <summary>
            Number of items in the stack
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Stackable">
            <summary>
            Stackable?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.StackCount">
            <summary>
            The total number of the stackable item in your inventory
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Stacks">
            <summary>
            Number of stacks of the item in your inventory
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.StackSize">
            <summary>
            Maximum number if items that can be in the stack
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.STR">
            <summary>
            STR value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.StrikeThrough">
            <summary>
            Strikethrough value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.StunResist">
            <summary>
            Stun resist value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.svCold">
            <summary>
            Cold resistance value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.svCorruption">
            <summary>
            Corruption resistance value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.svDisease">
            <summary>
            Disease resistance value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.svFire">
            <summary>
            Fire resistance value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.svMagic">
            <summary>
            Magic resistance value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.svPoison">
            <summary>
            Poison resistance value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Timer">
            <summary>
            Time remaining on recast timer
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.TimerReady">
            <summary>
            Number of seconds remaining on recast timer
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Tradeskills">
            <summary>
            Used in tradeskills?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Tribute">
            <summary>
            Tribute value of item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Type">
            <summary>
            Type of the item e.g. Armor, 2H Slashing (corresponds to type in bazaar search)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Value">
            <summary>
            Value in coppers
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Weight">
            <summary>
            Item weight
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.WIS">
            <summary>
            WIS value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Worn">
            <summary>
            Spell effect when item is worn
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.WornSlot">
            <summary>
            Can item be worn in invslot with name, or the nth invslot (1 based) that the item can be worn in
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.WornSlots">
            <summary>
            Number of slots this item can be worn in (fingers/ears count as 2)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.LoreEquipped">
            <summary>
            Item is lore when equipped?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.Luck">
            <summary>
            Luck value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.MinLuck">
            <summary>
            Minimum luck value on item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ItemType.MaxLuck">
            <summary>
            Maximum luck value on item
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.KeyRingType">
            <summary>
            MQ2 type for an item on the keyring
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.KeyRingType.Index">
            <summary>
            Index of the item in the list (1 based)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.KeyRingType.Name">
            <summary>
            Name of the item
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.MacroQuestType">
            <summary>
            MQ2 type for general information about MQ2
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroQuestType.Error">
            <summary>
            Last normal error message
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroQuestType.SyntaxError">
            <summary>
            Last syntax error message
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroQuestType.MQ2DataError">
            <summary>
            Last MQ2Data parsing error message
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroQuestType.BuildDate">
            <summary>
            Date that MQ2Main.dll was built
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroQuestType.Build">
            <summary>
            Build number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroQuestType.Path">
            <summary>
            Directory of MQ2Main.dll (equivalent of INI path, <seealso cref="P:MQ2DotNet.MQ2API.MQ2.INIPath"/>)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroQuestType.Version">
            <summary>
            Version number of MQ2Main.dll
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroQuestType.InternalName">
            <summary>
            Internal name of build e.g. RedGuides
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.MacroType">
            <summary>
            MQ2 type for information about the currently running macro
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroType.Name">
            <summary>
            Name of the currently running macro including extension e.g. kissassist.mac
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroType.RunTime">
            <summary>
            Time in milliseconds that the macro has been running for
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroType.Paused">
            <summary>
            Macro currently paused?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroType.Return">
            <summary>
            Value returned by the last subroutine call
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroType.IsTLO">
            <summary>
            Is the given name a Top Level Object?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroType.IsOuterVariable">
            <summary>
            Is the given name a variable declared with outer scope?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroType.StackSize">
            <summary>
            Stack depth of the currently executing macro
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroType.Params">
            <summary>
            Number of parameters supplied to the currently executing macro
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroType.CurLine">
            <summary>
            Line the currently executing macro is on
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroType.CurCommand">
            <summary>
            Current command to be run by the executed macro
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroType.MemUse">
            <summary>
            Memory usage in bytes of the currently executing macro
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.MacroType.Undeclared">
            <summary>
            Prints undeclared variables to chat
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MacroType.CurSub">
            <summary>
            Subroutine currently being executed, including arguments e.g. "MySub(string arg1)"
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.MathType">
            <summary>
            Contains various mathematical functions. Not implemented for .NET
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.MercenaryType">
            <summary>
            MQ2 type for a mercenary
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MercenaryType.AAPoints">
            <summary>
            Number of unspent mercenary AA points
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MercenaryType.Stance">
            <summary>
            Current stance of the mercenary e.g. Balanced
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MercenaryType.State">
            <summary>
            Current state of the mercenary (returns "DEAD","SUSPENDED","ACTIVE", or "UNKNOWN")
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MercenaryType.StateID">
            <summary>
            Current state ID of the mercenary as a number.
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MercenaryType.Index">
            <summary>
            Index of the mercenary in your mercenary list (1 based)
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.MenuType">
            <summary>
            MQ2 type for a context menu
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.MenuType.Select(System.String)">
            <summary>
            Select the first item in the context menu with text containg a given string
            </summary>
            <param name="containing">Text to search for</param>
            <returns>true if an item was found, otherwise false</returns>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MenuType.Address">
            <summary>
            Memory address of the CContextMenu structure
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MenuType.NumVisibleMenus">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MenuType.CurrMenu">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MenuType.Name">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MenuType.NumItems">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MenuType.Items">
            <summary>
            TODO: What is this?
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.MerchantType">
            <summary>
            MQ2 type for a merchant
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MerchantType.Open">
            <summary>
            Returns TRUE if merchant is open
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MerchantType.Item">
            <summary>
            An item in the merchant's inventory, by name or slot number (1 based)
            Name is a partial match unless the string begins with = e.g. "=Water Flask"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MerchantType.Items">
            <summary>
            Number of items on the merchant
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MerchantType.Markup">
            <summary>
            The number used to calculate the buy and sell value for an item (this is what is changed by charisma and faction). This value is capped at 1.05
            Markup*Item Value = Amount you buy item for
            Item Value*(1/Markup) = Amount you sell item for
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MerchantType.Full">
            <summary>
            Returns TRUE if the merchant's inventory is full
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MerchantType.ItemsReceived">
            <summary>
            Is the items list populated yet?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.MerchantType.SelectedItem">
            <summary>
            Currently selected item
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.MerchantType.SelectItem(System.String)">
            <summary>
            Select an item in the merchants inventory by name. Prepend with '=' for an exact match, otherwise partial is used
            </summary>
            <param name="itemName"></param>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.MerchantType.Buy(System.Int32)">
            <summary>
            Buy the specified quantity of the currently selected item
            </summary>
            <param name="quantity"></param>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.MerchantType.Sell(System.Int32)">
            <summary>
            Sell the specified quantity of the currently selected item
            </summary>
            <param name="quantity"></param>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.MerchantType.OpenWindow">
            <summary>
            Open the merchant window for the current target if it is a merchant, otherwise the closest merchant
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.MerchantType.CloseWindow">
            <summary>
            Close the merchant window if it is open
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.PetType">
            <summary>
            MQ2 type for a pet
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PetType.Buff">
            <summary>
            A buff on your pet index (1 based), or the index of a buff on your pet by name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PetType.BuffDuration">
            <summary>
            Remaining duration on a pet's buff, by spell name or index (1 based)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PetType.Combat">
            <summary>
            Is pet in combat?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PetType.GHold">
            <summary>
            Is GHold enabled?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PetType.Hold">
            <summary>
            Is Hold enabled?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PetType.ReGroup">
            <summary>
            Is ReGroup enabled?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PetType.Stance">
            <summary>
            Current stance, either "FOLLOW" or "GUARD"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PetType.Stop">
            <summary>
            Is Stop enabled?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PetType.Target">
            <summary>
            Pet's target
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PetType.Taunt">
            <summary>
            Is Taunt enabled?
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.PluginType">
            <summary>
            MQ2 type for a plugin
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PluginType.Name">
            <summary>
            Plugin's name e.g. mq2cast
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PluginType.Version">
            <summary>
            Plugin's version as exported by the PLUGIN_VERSION macro
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.PointMerchantItemType">
            <summary>
            MQ2 type for an item sold by a point merchant
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PointMerchantItemType.Name">
            <summary>
            Item name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PointMerchantItemType.ItemID">
            <summary>
            Item ID
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PointMerchantItemType.Price">
            <summary>
            Item cost
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PointMerchantItemType.ThemeID">
            <summary>
            Theme ID TODO: What is PointMerchantItemType.ThemeID? (ITEMINFO::LDTheme)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PointMerchantItemType.IsStackable">
            <summary>
            Is the item stackable?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PointMerchantItemType.IsLore">
            <summary>
            Is the item lore?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PointMerchantItemType.RaceMask">
            <summary>
            Races that can use the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PointMerchantItemType.ClassMask">
            <summary>
            Classes that can use the item
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PointMerchantItemType.CanUse">
            <summary>
            Can I use it?
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.PointMerchantType">
            <summary>
            MQ2 type for a point merchant
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.PointMerchantType.Item">
            <summary>
            Item by name or slot number (1 based)
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.RaceType">
            <summary>
            MQ2 type for a character race
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaceType.ID">
            <summary>
            ID of the race, this should correspond to the <see cref="T:MQ2DotNet.EQ.Race"/> enum
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaceType.Name">
            <summary>
            Full name of the race e.g. Froglok
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.RaidMemberType">
            <summary>
            MQ2 type for a member of a raid
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidMemberType.Name">
            <summary>
            Raid member's name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidMemberType.Group">
            <summary>
            Current group number (or 0)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidMemberType.GroupLeader">
            <summary>
            Returns TRUE if the member is a group leader
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidMemberType.RaidLeader">
            <summary>
            Returns TRUE if the member is the raid leader
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidMemberType.Looter">
            <summary>
            Allowed to loot with current loot rules and looters?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidMemberType.Spawn">
            <summary>
            Spawn object for this player if available (must be in zone)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidMemberType.Level">
            <summary>
            Raid member's level (works without being in zone)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidMemberType.Class">
            <summary>
            Raid member's class (works without being in zone)
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.RaidType">
            <summary>
            MQ2 type for a raid
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidType.Locked">
            <summary>
            Returns TRUE if the raid is locked
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidType.Invited">
            <summary>
            Invited to raid?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidType.Member">
            <summary>
            Raid member by name or number (1 based)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidType.Members">
            <summary>
            Total number of raid members
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidType.Target">
            <summary>
            Raid target (clicked in raid window)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidType.Leader">
            <summary>
            Raid leader
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidType.TotalLevels">
            <summary>
            Sum of all raid members' levels
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidType.AverageLevel">
            <summary>
            Average level of raid members (more accurate than in the window)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidType.LootType">
            <summary>
            Loot type number (1 = Leader, 2 = Leader and GroupLeader, 3 = Leader and Specified
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidType.Looters">
            <summary>
            Number of specified looters
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidType.Looter">
            <summary>
            Specified looter name by number (1 - <see cref="P:MQ2DotNet.MQ2API.DataTypes.RaidType.Looters"/>)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidType.MainAssist">
            <summary>
            Raid main assist
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.RaidType.MasterLooter">
            <summary>
            Raid master looter
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.SkillType">
            <summary>
            MQ2 type for a skill
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SkillType.Name">
            <summary>
            Name of the skill
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SkillType.ID">
            <summary>
            Skill number
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SkillType.ReuseTime">
            <summary>
            Reuse time for the ability in milliseconds (not time remaining)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SkillType.MinLevel">
            <summary>
            Minimum level for your class
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SkillType.SkillCap">
            <summary>
            Skill cap based on your current level and class
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SkillType.AltTimer">
            <summary>
            TODO: Is this the common timer number (shared by other skills, but not the same as AA timers)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SkillType.Activated">
            <summary>
            Returns TRUE if the skill has been activated
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SkillType.Auto">
            <summary>
            Skill has /autoskill on?
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.SolventType">
            <summary>
            MQ2 type for a solvent
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SolventType.Name">
            <summary>
            Item name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SolventType.ID">
            <summary>
            Item ID
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SolventType.Item">
            <summary>
            <see cref="T:MQ2DotNet.MQ2API.DataTypes.ItemType"/> for the solvent, if available
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SolventType.Count">
            <summary>
            How many we currently have in inventory
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.SpawnType">
            <summary>
            MQ2 type for a spawn
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.SpawnType.#ctor(MQ2DotNet.MQ2API.MQ2TypeFactory,System.IntPtr)">
            <summary>
            Create a SpawnType from a pointer to a SPAWNINFO struct
            </summary>
            <param name="mq2TypeFactory"></param>
            <param name="pSpawn"></param>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.AARank">
            <summary>
            Dunno wtf this is or why I would care about it
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.ActorDef">
            <summary>
            ActorDef name for this spawn
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Address">
            <summary>
            Memory address of the SPAWNINFO struct for this spawn
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.AFK">
            <summary>
            AFK flag set?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Aggressive">
            <summary>
            returns TRUE or FALSE if a mob is aggressive or not
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Animation">
            <summary>
            Current animation ID, see https://www.macroquest2.com/wiki/index.php/Animations
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Anonymous">
            <summary>
            Anon flag set
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Assist">
            <summary>
            Current Raid or Group assist target?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.AssistName">
            <summary>
            TODO: SpawnType.AssistName is always blank?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.bAlwaysShowAura">
            <summary>
            TODO: What is SpawnType.bAlwaysShowAura
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.bBetaBuffed">
            <summary>
            TODO: What is SpawnType.bBetaBuffed
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.BearingToTarget">
            <summary>
            Returns stupid numbers
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Binding">
            <summary>
            Binding wounds?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Blind">
            <summary>
            Blind?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Body">
            <summary>
            Body type
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.bShowHelm">
            <summary>
            Seems broken and useless even if it wasn't
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.bStationary">
            <summary>
            True for stationary spawns maybe? Returns FALSE for me when I'm standing still
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.bTempPet">
            <summary>
            Is the spawn a temp pet?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Buyer">
            <summary>
            Is a buyer? (ie. Buyer in the bazaar)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.bWaitingForPort">
            <summary>
            No idea
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.CanSplashLand">
            <summary>
            TRUE/FALSE on if a splash spell can land...NOTE! This check is ONLY for line of sight to the targetindicator (red/green circle)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Casting">
            <summary>
            Spell, if currently casting (only accurate on yourself, not NPCs or other group members)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.CeilingHeightAtCurrLocation">
            <summary>
            Ceiling height at the spawn's current location
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Class">
            <summary>
            Class
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.CleanName">
            <summary>
            The "cleaned up" name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.CollisionCounter">
            <summary>
            Collision counter
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.CombatSkillTicks">
            <summary>
            Valid indexes are 0 and 1. TODO: What is SpawnType.CombatSkillTicks
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.ContractorID">
            <summary>
            Spawn ID of this spawn's contractor
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.CorpseDragCount">
            <summary>
            Returns weird numbers
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.CurrentEndurance">
            <summary>
            Current Endurance points (only updates when target/group)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.CurrentHPs">
            <summary>
            Current hit points
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.CurrentMana">
            <summary>
            Current Mana points (only updates when target/group)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.D">
            <summary>
            Shortcut for -Z (makes Downward positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Dead">
            <summary>
            Dead?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Deity">
            <summary>
            Deity
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.DisplayName">
            <summary>
            Name displayed in game (same as EQ's %T)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Distance">
            <summary>
            2D distance to the spawn in the XY plane
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Distance3D">
            <summary>
            3D distance to the spawn in the XYZ plane
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.DistancePredict">
            <summary>
            2D distance to the spawn in the XY plane, taking into account the spawn's movement but not the player's
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.DistanceX">
            <summary>
            1D distance to the spawn in the X plane
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.DistanceY">
            <summary>
            1D distance to the spawn in the Y plane
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.DistanceZ">
            <summary>
            1D distance to the spawn in the Z plane
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.DraggingPlayer">
            <summary>
            Player this corpse is being dragged by
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.DragNames">
            <summary>
            Players whose corpse this spawn is dragging. Valid indexes are 0 and 1
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Ducking">
            <summary>
            Ducking?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.E">
            <summary>
            Shortcut for -X (makes Eastward positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.EQLoc">
            <summary>
            Location using EQ format
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Equipment">
            <summary>
            ID of the equipment used by the spawn
            returns a inttype, it takes numbers 0-8 or names: head chest arms wrists hands legs feet primary offhand
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.FD">
            <summary>
            TODO: What is SpawnType.FD?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.FeetWet">
            <summary>
            Feet wet/swimming?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Feigning">
            <summary>
            Feigning?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Fleeing">
            <summary>
            Is your target moving away from you?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.FloorZ">
            <summary>
            Floor z value at the spawn's location
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Following">
            <summary>
            The spawn a player is following using /follow on - also returns your pet's target via ${Me.Pet.Following}
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Gender">
            <summary>
            Gender
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.GM">
            <summary>
            GM or Guide?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.GMRank">
            <summary>
            GM rank
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Guild">
            <summary>
            Name of the spawn's guild
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.GuildStatus">
            <summary>
            Guild status (Leader, Officer, Member)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Heading">
            <summary>
            Direction the spawn is facing
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.HeadingTo">
            <summary>
            Heading player must travel in to reach this spawn
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.HeadingToLoc">
            <summary>
            Heading to the coordinates y,x from the spawn
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Holding">
            <summary>
            Represents what the pc/npc is holding
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.HoldingAnimation">
            <summary>
            Holding animation
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Hovering">
            <summary>
            Hovering?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.ID">
            <summary>
            Spawn's ID
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.InPvPArea">
            <summary>
            In a PvP area?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Invis">
            <summary>
            Invis?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Invited">
            <summary>
            Spawn has been invited to a group
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Inviter">
            <summary>
            Who invited the spawn to a group?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.IsBerserk">
            <summary>
            Spawn is berserk?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.IsPassenger">
            <summary>
            Spawn is a passenger?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.IsSummoned">
            <summary>
            If it's a summoned being (pet for example). Unsure if useful for druid nukes.
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.LastCastNum">
            <summary>
            TODO: What is SpawnType.LastCastNum
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.LastCastTime">
            <summary>
            TODO: What is SpawnType.LastCastTime
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Level">
            <summary>
            Level of the spawn
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Levitating">
            <summary>
            Spawn is levitating?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.LFG">
            <summary>
            LFG flag set?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Light">
            <summary>
            Name of the light class this spawn has
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Linkdead">
            <summary>
            Linkdead?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Loc">
            <summary>
            Loc of the spawn (Y, X)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.LocYX">
            <summary>
            Loc of the spawn (Y, X)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.LocYXZ">
            <summary>
            Loc of the spawn (Y, X, Z)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Look">
            <summary>
            Looking this angle
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Mark">
            <summary>
            Current Raid or Group marked npc mark number (raid first)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Master">
            <summary>
            Master, if it is charmed or a pet
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.MaxEndurance">
            <summary>
            Maximum Endurance points (only updates when target/group)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.MaxHPs">
            <summary>
            Maximum hit points
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.MaxMana">
            <summary>
            Maximum Mana points (only updates when target/group)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.MaxRange">
            <summary>
            The max distance from this spawn for it to hit you
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.MaxRangeTo">
            <summary>
            The Max distance from this spawn for you to hit it
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.MercID">
            <summary>
            Spawn ID of this spawn's contractor
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Mount">
            <summary>
            This spawn's mount 
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Moving">
            <summary>
            Moving?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.MQLoc">
            <summary>
            Location using MQ format (Y, X, Z)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Name">
            <summary>
            Internal name of the spawn e.g. a_rat01
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Named">
            <summary>
            Is this a "named" spawn (ie. does it's name not start with an "a" or an "an", plus a bunch of other checks. See IsNamed() in MQ2Utilities.cpp)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.NearestSpawn">
            <summary>
            Nth closest spawn to this spawn, or the nth closest matching a search string e.g. "2,npc" for the second closest NPC
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Next">
            <summary>
            Next spawn in the linked list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Owner">
            <summary>
            Owner, if mercenary
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.PctEndurance">
            <summary>
            Endurance as a percentage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.PctHPs">
            <summary>
            HP as a percentage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.PctMana">
            <summary>
            Mana as a percentage
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Pet">
            <summary>
            Spawn's pet
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.PlayerState">
            <summary>
            returns a mask as an inttype which has the following meaning:
            0=Idle 1=Open 2=WeaponSheathed 4=Aggressive 8=ForcedAggressive 0x10=InstrumentEquipped 0x20=Stunned 0x40=PrimaryWeaponEquipped 0x80=SecondaryWeaponEquipped
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Prev">
            <summary>
            Next spawn in EQ's favourite data structure
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Primary">
            <summary>
            Item ID of anything that may be in the Primary slot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.pTouchingSwitch">
            <summary>
            TODO: What is SpawnType.pTouchingSwitch
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Race">
            <summary>
            Spawn's race
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Roleplaying">
            <summary>
            Roleplaying flag set?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.S">
            <summary>
            Shortcut for -Y (makes Southward positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Secondary">
            <summary>
            Item ID of anything that may be in the Secondary slot
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.SeeInvis">
            <summary>
            Spawn can see invis, takes an index of 0 - 2, guessing for invis/invis vs undead/improved invis?
            TODO: Confirm function of SpawnType.SeeInvis
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Sitting">
            <summary>
            Sitting?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Sneaking">
            <summary>
            Sneaking?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.SpawnStatus">
            <summary>
            Spawn status, takes an index of 0 - 5. TODO: Confirm what they mean
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Speed">
            <summary>
            Speed as a percentage of regular run speed
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Standing">
            <summary>
            Standing?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.StandState">
            <summary>
            StandState
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.State">
            <summary>
            STAND, SIT, DUCK, BIND, FEIGN, DEAD, STUN, HOVER, MOUNT, UNKNOWN
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Stuck">
            <summary>
            Stuck?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Stunned">
            <summary>
            Stunned?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Suffix">
            <summary>
            Suffix attached to name, eg. of servername
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Surname">
            <summary>
            Last name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.TargetOfTarget">
            <summary>
            Target of this spawn's target
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.TimeBeenDead">
            <summary>
            Time this spawn has been dead for
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Title">
            <summary>
            Prefix/Title before name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Trader">
            <summary>
            Trader (in bazaar)?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Type">
            <summary>
            PC, NPC, Untargetable, Mount, Pet, Corpse, Chest, Trigger, Trap, Timer, Item, Mercenary, Aura, Object, Banner, Campfire, Flyer
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Underwater">
            <summary>
            Underwater?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.WarCry">
            <summary>
            TODO: What is SpawnType.WarCry?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.X">
            <summary>
            X, the Northward-positive coordinate
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.ConColor">
            <summary>
            GREY, GREEN, LIGHT BLUE, BLUE, WHITE, YELLOW, RED
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.GroupLeader">
            <summary>
            Group leader?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.LineOfSight">
            <summary>
            Returns TRUE if spawn is in LoS
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Targetable">
            <summary>
            Spawn can be targetted?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Y">
            <summary>
            Y, the Westward-positive coordinate
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.Z">
            <summary>
            Z, the Upward-positive coordinate
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.CachedBuff">
            <summary>
            This is fucked, not dealing with it
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpawnType.CachedBuffCount">
            <summary>
            Number of cached buffs
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.SpawnType.DoTarget">
            <summary>
            Targets the spawn (equivalent of /target)
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.SpawnType.DoFace">
            <summary>
            Faces the spawn (equivalent of /face)
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.SpawnType.LeftClick">
            <summary>
            Left click on the spawn
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.SpawnType.RightClick">
            <summary>
            Right click on the spawn
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.SpawnType.DoAssist">
            <summary>
            Assists the spawn (equivalent of /assist)
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.SpellType">
            <summary>
            MQ2 type for a spell
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.ID">
            <summary>
            Spell ID
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Name">
            <summary>
            Spell Name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Mana">
            <summary>
            Mana cost (unadjusted)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.ResistAdj">
            <summary>
            Resist adjustment
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Range">
            <summary>
            Maximum range to target (use <see cref="P:MQ2DotNet.MQ2API.DataTypes.SpellType.AERange"/> for AE and group spells)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.AERange">
            <summary>
            AE range (group spells use this for their range)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.PushBack">
            <summary>
            Push back amount
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.CastTime">
            <summary>
            Cast time (unadjusted)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.RecoveryTime">
            <summary>
            Time to recover after fizzle
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.FizzleTime">
            <summary>
            Time to recover after fizzle
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.RecastTime">
            <summary>
            Time to recast after successful cast
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.ResistType">
            <summary>
            One of Chromatic, Corruption, Cold, Disease, Fire, Magic, Poison, Unknown, Unresistable, Prismatic
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.SpellType_">
            <summary>
            "Beneficial(Group)", "Beneficial", "Detrimental" or "Unknown"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.TargetType">
            <summary>
            Target type e.g. Self, Animal, Targeted AE etc
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Skill">
            <summary>
            Casting school, one of Abjuration, Alteration, Conjuration, Divination, Evocation
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.MyCastTime">
            <summary>
            Adjusted cast time
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Duration">
            <summary>
            Duration of the spell (if any), MQ2 version
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.EQSpellDuration">
            <summary>
            Duration of the spell (if any), EQ version
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.CastByMe">
            <summary>
            Message when you cast the spell
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.CastByOther">
            <summary>
            Message when someone else casts the spell
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.CastOnYou">
            <summary>
            Message when the spell lands on you
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.CastOnAnother">
            <summary>
            Message when the spawn lands on someone else
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.WearOff">
            <summary>
            Message when the spell wears off
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.CounterType">
            <summary>
            The resist counter. Will be one of "Disease", "Poison", "Curse" or "Corruption"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.CounterNumber">
            <summary>
            The number of counters that the spell adds
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.NewStacks">
            <summary>
            Same as Stacks
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.NewStacksWith">
            <summary>
            Same as WillStack
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Stacks">
            <summary>
            Does this spell stack with your current buffs (duration is in ticks)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.StacksTarget">
            <summary>
            Will this spell stack on your target?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.StacksPet">
            <summary>
            Does this spell stack with your pet's current buffs (duration is in ticks)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.StacksWith">
            <summary>
            Does this spell stack with another spell?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.WillStack">
            <summary>
            Does this spell stack with another spell?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.MyRange">
            <summary>
            Adjusted spell range, including focus effects, etc.
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Address">
            <summary>
            Memory address of the SPELL struct
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.EnduranceCost">
            <summary>
            Endurance cost of the spell
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.MaxLevel">
            <summary>
            Max level the spell can affect
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Category">
            <summary>
            Category of the spell e.g. Direct Damage, Heals
            First level of the menu when you right click a gem
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Subcategory">
            <summary>
            Subcategory of the spell e.g. Combat Innates, Damage Shield
            Second level of the menu when you right click a gem
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Restrictions">
            <summary>
            Text of the nth restriction (1 based) on the spell
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Base">
            <summary>
            Base value of the nth spell effect slot, 1 based
            e.g. for a nuke that says Slot 1: Decrease HP by 1000
            Base[1] = -1000
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Base2">
            <summary>
            Base2 value of the nth spell effect slot, 1 based
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Max">
            <summary>
            Max value of the nth spell effect slot, 1 based
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Calc">
            <summary>
            Calc value of the nth spell effect slot, 1 based
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Attrib">
            <summary>
            Attrib value of the nth spell effect slot, 1 based
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.CalcIndex">
            <summary>
            TODO: What is SpellType.CalcIndex
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.NumEffects">
            <summary>
            Number of spell effect slots this spell has
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.AutoCast">
            <summary>
            TODO: What is SpellType.AutoCast
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Extra">
            <summary>
            TODO: What is SpellType.Extra
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.RecastTimerID">
            <summary>
            Shared recast timer number for this spell
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.SPA">
            <summary>
            SPA number of this spell
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.ReagentID">
            <summary>
            Item ID of the nth required reagent (valid indexes are 1 - 4)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.ReagentCount">
            <summary>
            Quantity of the nth required reagent (valid indexes are 1 - 4)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.TimeOfDay">
            <summary>
            Required time of day to cast, 0 = any, 1 = day only, 2 = night only
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.DurationWindow">
            <summary>
            Which buff window the spell appears in, 0 = long, 1 = short
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.CanMGB">
            <summary>
            Spell can be MGBed
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.IsSkill">
            <summary>
            Is this spell a skill?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Deletable">
            <summary>
            TODO: From spellbook or can be clicked off?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.BookIcon">
            <summary>
            Icon ID in the spell book
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Target">
            <summary>
            TODO: What is SpellType.Target?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Description">
            <summary>
            Spell effect description from the spell window
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Caster">
            <summary>
            TODO: What is SpellType.Caster?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Rank">
            <summary>
            Returns either 1, 2 or 3 for spells and 4-30 for clickys and potions.
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.RankName">
            <summary>
            Returns the spell/combat ability name for the rank the character has.
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.SpellGroup">
            <summary>
            TODO: What is SpellType.SpellGroup?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.SubSpellGroup">
            <summary>
            TODO: What is SpellType.SubSpellGroup?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Beneficial">
            <summary>
            Is spell beneficial?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.IsActiveAA">
            <summary>
            Is the spell an active AA?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Location">
            <summary>
            Appears to be max distance
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.IsSwarmSpell">
            <summary>
            Is this spell a swarm spell?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.DurationValue1">
            <summary>
            Duration of the spell (if any). Note - returns DurationCap member of SPELLINFO
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.IllusionOkWhenMounted">
            <summary>
            Illusion cast by this spell is allowed when you are mounted
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.HasSPA">
            <summary>
            Does this spell have a given SPA?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.Trigger">
            <summary>
            TODO: What is SpellType.Trigger
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.BaseName">
            <summary>
            Name of the spell, without rank
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.NoExpendReagentID">
            <summary>
            Item ID of a non-expended reagent. 1 based index
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SpellType.StacksSpawn">
            <summary>
            Uses cached buffs to see if the spell will stack on a spawn, by name or Id. Not recommended.
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.StringType">
            <summary>
            MQ2 type for a string
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.StringType.op_Implicit(MQ2DotNet.MQ2API.DataTypes.StringType)~System.String">
            <summary>
            Implicit conversion to a string
            </summary>
            <param name="typeVar"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.SwitchType">
            <summary>
            MQ2 type for a switch object
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.Address">
            <summary>
            Memory address of the DOOR struct
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.ID">
            <summary>
            Switch ID
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.X">
            <summary>
            X coordinate (Westward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.Y">
            <summary>
            Y coordinate (Northward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.Z">
            <summary>
            Z coordinate (Upward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.DefaultX">
            <summary>
            X coordinate of "closed" switch (Westward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.DefaultY">
            <summary>
            Y coordinate of "closed" switch (Northward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.DefaultZ">
            <summary>
            Z coordinate of "closed" switch (Upward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.Heading">
            <summary>
            Switch is facing this heading
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.DefaultHeading">
            <summary>
            When "closed", switch is facing this heading
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.Open">
            <summary>
            Open?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.HeadingTo">
            <summary>
            Direction player must move to meet this switch
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.Distance">
            <summary>
            2D distance from player to this switch in the XY plane
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.Distance3D">
            <summary>
            3D distance from player to this switch
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.SwitchType.LineOfSight">
            <summary>
            Returns TRUE if the switch is in LoS
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.SwitchType.Toggle">
            <summary>
            Toggle the switch, equivalent of clicking on it. Uses an item if you have it on the cursor
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.TargetBuffType">
            <summary>
            MQ2 type for a buff on the current target spawn
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetBuffType.Address">
            <summary>
            Memory address of the spell ID DWORD for this buff slot in CTARGETWND
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetBuffType.Index">
            <summary>
            Index (0 based) of this buff in the target's buff window, i.e. slot #
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetBuffType.Duration">
            <summary>
            Remaining duration on the buff
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.TargetType">
            <summary>
            MQ2 type for the current target
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.BuffsPopulated">
            <summary>
            Returns TRUE when the target's buffs are finished populating.
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Buff">
            <summary>
            Buff/debuff on the target by name or slot # (1 based)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.MyBuff">
            <summary>
            Buff/debuff on the target that you cast, by name or slot # (1 based)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.BuffCount">
            <summary>
            Total number of buffs/debuffs
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.MyBuffCount">
            <summary>
            Total number of buffs/debuffs cast by you
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.MyBuffDuration">
            <summary>
            Remaining duration on a buff you cast by name or slot # (1 based)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.BuffDuration">
            <summary>
            Remaining duration on a buff by name or slot # (1 based)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.PctAggro">
            <summary>
            Your percentage aggro on the target
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.SecondaryPctAggro">
            <summary>
            Secondary aggro percentage on the target
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.SecondaryAggroPlayer">
            <summary>
            Spawn that has secondary aggro
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.AggroHolder">
            <summary>
            Spawn that has aggro
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Slowed">
            <summary>
            Slow debuff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Rooted">
            <summary>
            Root debuff it the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Mezzed">
            <summary>
            Mez debuff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Crippled">
            <summary>
            Cripple debuff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Maloed">
            <summary>
            Malo debuff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Tashed">
            <summary>
            Tash debuff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Snared">
            <summary>
            Snare debuff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Hasted">
            <summary>
            Haste buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Beneficial">
            <summary>
            First beneficial buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.DSed">
            <summary>
            Damage shield buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.RevDSed">
            <summary>
            Reverse damage shield buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Charmed">
            <summary>
            Charm debuff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Aego">
            <summary>
            Aego buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Skin">
            <summary>
            Skin buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Focus">
            <summary>
            Focus buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Regen">
            <summary>
            Regen buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Diseased">
            <summary>
            Debuff that is increasing target's disease counter
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Poisoned">
            <summary>
            Debuff that is increasing target's poison counter
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Cursed">
            <summary>
            Debuff that is increasing target's curse counter
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Corrupted">
            <summary>
            Debuff that is increasing target's corruption counter
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Symbol">
            <summary>
            Symbol buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Clarity">
            <summary>
            Clarify buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Pred">
            <summary>
            Pred buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Strength">
            <summary>
            Strength buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Brells">
            <summary>
            Brells buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.SV">
            <summary>
            Spiritual Vitality buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.SE">
            <summary>
            Spiritual Enlightenment buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.HybridHP">
            <summary>
            Hybrid HP buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Growth">
            <summary>
            Growth buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Shining">
            <summary>
            Shining buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Feared">
            <summary>
            Fear debuff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Silenced">
            <summary>
            Silence debuff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Invulnerable">
            <summary>
            Invulnerability buff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.Dotted">
            <summary>
            DoT debuff if the target has one
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TargetType.MaxMeleeTo">
            <summary>
            Maximum range from which the character can melee hit the target
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.TaskMemberType">
            <summary>
            MQ2 type for a member of a shared task
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskMemberType.Name">
            <summary>
            Name of the task member
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskMemberType.Leader">
            <summary>
            Is this member the task leader?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskMemberType.Index">
            <summary>
            Index of the member in the list (1 based)
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.TaskObjectiveType">
            <summary>
            MQ2 type for a task objective
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskObjectiveType.Index">
            <summary>
            Index of this objective in the list (0 based)
            Confusingly, ${Task[taskname].Objective[1].Index} == 0
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskObjectiveType.Instruction">
            <summary>
            Instruction text for this objective, as seen in the Quest Journal window
            Note that accessing this member will select the task
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskObjectiveType.Status">
            <summary>
            Status text for the objective, e.g. 0/1 or Done, as seen in the Quest Journal window
            Note that accessing this member will select the task
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskObjectiveType.Zone">
            <summary>
            Zone for the objective, as seen in the Quest Journal window
            Note that accessing this member will select the task
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.TaskType">
            <summary>
            MQ2 type for a task
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskType.Address">
            <summary>
            Memory address of the TASKMEMBER struct
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskType.Type">
            <summary>
            Type of task, either Shared or Quest
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskType.Index">
            <summary>
            Index of the task in your task list, 1 based
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskType.Leader">
            <summary>
            Name of the leader of the task
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskType.Title">
            <summary>
            Name/title of the task
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskType.Timer">
            <summary>
            Time remaining on the task
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskType.Member">
            <summary>
            Member of the task, by name or index (1 based)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskType.Members">
            <summary>
            Number of members
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskType.Objective">
            <summary>
            Task objective by name or index (1 based)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TaskType.Step">
            <summary>
            First task objective with a status other than "Done"
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.TaskType.Select">
            <summary>
            Select the task in the task window
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.TicksType">
            <summary>
            MQ2 type for a number of in game ticks
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TicksType.Hours">
            <summary>
            The hours component of "hh:mm:ss"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TicksType.Minutes">
            <summary>
            The minutes component of "hh:mm:ss"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TicksType.Seconds">
            <summary>
            The seconds component of "hh:mm:ss"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TicksType.TimeHMS">
            <summary>
            The total time in "hh:mm:ss"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TicksType.Time">
            <summary>
            The total time in "mm:ss"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TicksType.TotalMinutes">
            <summary>
            The total number of minutes
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TicksType.TotalSeconds">
            <summary>
            The total number of seconds
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TicksType.Ticks">
            <summary>
            The number of ticks
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.TicksType.op_Implicit(MQ2DotNet.MQ2API.DataTypes.TicksType)~System.Nullable{System.TimeSpan}">
            <summary>
            Implicit conversion to TimeSpan
            </summary>
            <param name="ticksType"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.TimerType">
            <summary>
            MQ2 type for a timer
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimerType.Value">
            <summary>
            Current value of the timer in 100ms intervals
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimerType.OriginalValue">
            <summary>
            Original value of the timer in 100ms, from when the variable was first created
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.TimeStampType">
            <summary>
            MQ2 type for a timestamp
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeStampType.Hours">
            <summary>
            The hours component of "hh:mm:ss"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeStampType.Minutes">
            <summary>
            The minutes component of "hh:mm:ss"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeStampType.Seconds">
            <summary>
            The seconds component of "hh:mm:ss"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeStampType.TimeHMS">
            <summary>
            The total time in "hh:mm:ss"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeStampType.Time">
            <summary>
            The total time in "mm:ss"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeStampType.TotalMinutes">
            <summary>
            The total number of minutes
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeStampType.TotalSeconds">
            <summary>
            The total number of seconds
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeStampType.Raw">
            <summary>
            Number of milliseconds
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeStampType.Float">
            <summary>
            Number of seconds
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeStampType.Ticks">
            <summary>
            Equivalent number of ticks
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.TimeStampType.op_Implicit(MQ2DotNet.MQ2API.DataTypes.TimeStampType)~System.Nullable{System.TimeSpan}">
            <summary>
            Implicit conversion to TimeSpan
            </summary>
            <param name="timestampType"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.TimeType">
            <summary>
            MQ2 type for a time
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeType.Hour">
            <summary>
            Hours since midnight
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeType.Hour12">
            <summary>
            Hour in 24h time
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeType.Minute">
            <summary>
            Minutes after the hour
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeType.Second">
            <summary>
            Seconds after the minute
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeType.DayOfWeek">
            <summary>
            Day of the week (0 = Sunday)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeType.Day">
            <summary>
            Day of the month
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeType.Month">
            <summary>
            Month of the year
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeType.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeType.Time12">
            <summary>
            Time in "HH:mm:ss" format (24h time)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeType.Time24">
            <summary>
            Time in "hh:mm:ss" format (12h time)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeType.Date">
            <summary>
            Date in "dd/MM/yyyy" format
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeType.Night">
            <summary>
            Before 7AM or after 9PM ?!
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TimeType.SecondsSinceMidnight">
            <summary>
            Number of seconds since midnight
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.TimeType.op_Implicit(MQ2DotNet.MQ2API.DataTypes.TimeType)~System.Nullable{System.DateTime}">
            <summary>
            Implicit conversion to DateTime
            </summary>
            <param name="timeType"></param>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.TypeType">
            <summary>
            MQ2 type for details about another type
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TypeType.Name">
            <summary>
            Type name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.TypeType.Member">
            <summary>
            Member name from an internal ID number (1 based), or ID number from name
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.WindowType">
            <summary>
            This type is used for both windows and controls on the window
            Some members are only applicable to controls e.g. Checked
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Address">
            <summary>
            Memory address of the CSIDLWND struct
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Open">
            <summary>
            Returns TRUE if the window is open
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Child">
            <summary>
            A child item by name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Parent">
            <summary>
            Parent window
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.FirstChild">
            <summary>
            First child window/control
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Next">
            <summary>
            Next sibling window
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.VScrollMax">
            <summary>
            Vertical scrollbar range
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.VScrollPos">
            <summary>
            Vertical scrollbar position
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.VScrollPct">
            <summary>
            Vertical scrollbar position in % to range from 0 to 100
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.HScrollMax">
            <summary>
            Horizontal scrollbar range
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.HScrollPos">
            <summary>
            Horizontal scrollbar position
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.HScrollPct">
            <summary>
            Horizontal scrollbar position in % to range from 0 to 100
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Children">
            <summary>
            Returns TRUE if the window has children
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Siblings">
            <summary>
            Returns TRUE if the window has siblings
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Minimized">
            <summary>
            Returns TRUE if the window is minimized
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.MouseOver">
            <summary>
            Returns TRUE if the mouse is currently over the window
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.X">
            <summary>
            Screen X position
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Y">
            <summary>
            Screen Y position
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Width">
            <summary>
            Width in pixels
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Height">
            <summary>
            Height in pixels
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.BGColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Text">
            <summary>
            Window's text
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Tooltip">
            <summary>
            TooltipReference text
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Checked">
            <summary>
            Returns TRUE if the button has been checked
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Highlighted">
            <summary>
            Returns TRUE if the window is highlighted
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Enabled">
            <summary>
            Returns TRUE if the window is enabled
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Style">
            <summary>
            Window style code
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Name">
            <summary>
            Name of window piece, e.g. "ChatWindow" for top level windows, or the piece name for child windows. Note: this is Custom UI dependent
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.ScreenID">
            <summary>
            ScreenID of window piece. Note: This is not Custom UI dependent, it must be the same on all UIs
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Type">
            <summary>
            Type of window piece (Screen for top level windows, or Listbox, Button, Gauge, Label, Editbox, Slider, etc)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.Items">
            <summary>
            Number of items in a Listbox or Combobox
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.HisTradeReady">
            <summary>
            Has the other person clicked the Trade button?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.MyTradeReady">
            <summary>
            Have I clicked the Trade button?
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.GetCurSel">
            <summary>
            The 1 based index of the currently selected item in a listbox or combobox
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.List">
            <summary>
            Access to list box items
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.WindowType.LeftMouseDown">
            <summary>
            Sends a left mouse button down notification to the window/control
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.WindowType.LeftMouseUp">
            <summary>
            Sends a left mouse button up notification to the window/control
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.WindowType.LeftMouseHeld">
            <summary>
            Sends a left mouse button held notification to the window/control
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.WindowType.LeftMouseHeldUp">
            <summary>
            Sends a left mouse button held up notification to the window/control
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.WindowType.RightMouseDown">
            <summary>
            Sends a right mouse button down notification to the window/control
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.WindowType.RightMouseUp">
            <summary>
            Sends a right mouse button up notification to the window/control
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.WindowType.RightMouseHeld">
            <summary>
            Sends a right mouse button held notification to the window/control
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.WindowType.RightMouseHeldUp">
            <summary>
            Sends a right mouse held up notification to the window/control
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.WindowType.DoOpen">
            <summary>
            Open the window
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.WindowType.DoClose">
            <summary>
            Close the window
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.WindowType.Select(System.Int32)">
            <summary>
            Select an item in a listbox or combobox
            </summary>
            <param name="index">1 based index of the item to select</param>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.WindowType.ListMember">
            <summary>
            Provides custom index access for list box items
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.ListMember.Item(System.Int32,System.Int32)">
            <summary>
            Text of an item at a given location in the list, row and column are 1 based indexes
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WindowType.ListMember.Item(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns the 1 based index of an item in the list with a specified text
            </summary>
            <param name="text"></param>
            <param name="column">The column (1 based) in which to search</param>
            <param name="exactMatch">If true, match exact text only, otherwise partial</param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.WorldLocationType">
            <summary>
            MQ2 type for a world location
            </summary>
            <remarks>This type is only used for character's bound locations, VarPtr.Dword is an index in CHARINFO2::BoundLocations</remarks>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WorldLocationType.ID">
            <summary>
            Zone ID
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WorldLocationType.Zone">
            <summary>
            Zone information
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WorldLocationType.Y">
            <summary>
            Y coordinate (Northward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WorldLocationType.X">
            <summary>
            X coordinate (Westward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WorldLocationType.Z">
            <summary>
            Z coordinate (Upward-positive)
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.WorldLocationType.Heading">
            <summary>
            Direction facing
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.XTargetType">
            <summary>
            MQ2 type for an entry in the xtarget list
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.XTargetType.Address">
            <summary>
            Memory address of XTargetMgr
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.XTargetType.TargetType">
            <summary>
            Extended target type e.g. Auto Hater
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.XTargetType.ID">
            <summary>
            Spawn ID
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.XTargetType.Name">
            <summary>
            Spawn's name
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.XTargetType.PctAggro">
            <summary>
            Your percentage aggro on the spawn
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.DataTypes.XTargetType.GetSpawn(MQ2DotNet.Services.TLO)">
            <summary>
            Spawn in the XTarget slot
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.DataTypes.ZoneType">
            <summary>
            MQ2 type for a zone
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ZoneType.Address">
            <summary>
            Memory address of the ZONELIST struct
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ZoneType.Name">
            <summary>
            Long name of the zone e.g. "The Plane of Knowledge"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ZoneType.ShortName">
            <summary>
            Short name of the zone e.g. "PoKnowledge"
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ZoneType.ID">
            <summary>
            Zone ID
            </summary>
        </member>
        <member name="P:MQ2DotNet.MQ2API.DataTypes.ZoneType.ZoneFlags">
            <summary>
            Zone flags, see ZONELIST::ZoneFlags in eqdata.h
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.MQ2">
            <summary>
            Contains methods and properties relating to MQ2 functionality
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2.WriteChat(System.String)">
            <summary>
            Write a line of chat to the MQ2 chat window
            </summary>
            <param name="text">Text to write</param>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2.WriteChatSafe(System.String)">
            <summary>
            Threadsafe version of <see cref="M:MQ2DotNet.MQ2API.MQ2.WriteChat(System.String)"/>
            </summary>
            <param name="text">Text to write</param>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2.Calculate(System.String,System.Boolean)">
            <summary>
            Uses MQ2's parser to evaluate a formula
            </summary>
            <param name="formula">Formula to calculate</param>
            <param name="parse">If <c>true</c>, will first parse any MQ2 variables in <paramref name="formula"/> before calculating</param>
            <returns>Result of the calculation</returns>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2.If(System.String,System.Boolean)">
            <summary>
            Use MQ2's parser to evaluate a formula and return true if it is non-zero
            </summary>
            <param name="formula">Formula to calculate</param>
            <param name="parse">If <c>true</c>, will first parse any MQ2 variables in <paramref name="formula"/> before calculating</param>
            <returns>True if the result is non-zero, otherwise false</returns>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2.Parse(System.String)">
            <summary>
            Parse any MQ2 variables in <paramref name="expression"/> and replace them with the resulting text
            </summary>
            <param name="expression">Expression to parse</param>
            <returns>Parsed expression</returns>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2.DoCommand(System.String)">
            <summary>
            Execute a command, exactly as if you typed it in the chat window
            Note: whether this will parse MQ2 variables or not depends only on the command entered. Use /noparse to force no parsing
            </summary>
            <param name="command">Command to execute</param>
        </member>
        <member name="P:MQ2DotNet.MQ2API.MQ2.INIPath">
            <summary>
            Directory of MQ2 ini files (and binaries too hopefully)
            </summary>
        </member>
        <member name="T:MQ2DotNet.MQ2API.MQ2DataType">
            <summary>
            Base class from which all wrapped MQ2 data types derive
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2DataType.#ctor(MQ2DotNet.MQ2API.MQ2TypeFactory,MQ2DotNet.MQ2API.MQ2TypeVar)">
            <summary>
            Create a new MQ2DataType from an MQ2TypeVar
            </summary>
            <param name="typeFactory">MQ2TypeFactory to use with GetMember calls</param>
            <param name="typeVar"></param>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2DataType.#ctor(System.String,MQ2DotNet.MQ2API.MQ2TypeFactory,MQ2DotNet.MQ2API.MQ2VarPtr)">
            <summary>
            Creates a new MQ2DataType of the specified typename from an MQ2VarPtr
            </summary>
            <param name="typeName"></param>
            <param name="typeFactory">MQ2TypeFactory to use with GetMember calls</param>
            <param name="varPtr"></param>
        </member>
        <member name="P:MQ2DotNet.MQ2API.MQ2DataType.VarPtr">
            <summary>
            Underlying data storage. Exposed for use in basic types e.g. int, double, etc
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2DataType.ToString">
            <inheritdoc />
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2DataType.GetMember``1(System.String,System.String)">
            <summary>
            Get a member from the variable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="index"></param>
            <returns>The member if the call succeeded and was able to be cast to the <typeparamref name="T"/>, otherwise null</returns>
            <exception cref="T:System.InvalidCastException" />
        </member>
        <member name="T:MQ2DotNet.MQ2API.MQ2DataType.IndexedMember`2">
            <summary>
            Helper class to access members with an indexer
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TIndex"></typeparam>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2DataType.IndexedMember`2.#ctor(MQ2DotNet.MQ2API.MQ2DataType,System.String)">
            <summary>
            Create a new IndexedMember that accesses the specified member in the specified MQ2DataType
            </summary>
            <param name="owner"></param>
            <param name="name"></param>
            <remarks>
            Should be used in the constructor, e.g. <code>MyIndexedMember = new MyIndexedMember(this, "MyIndexedMember"</code>
            Users can then do <code>myVar.MyIndexedMember["index"]</code> just like in macros
            </remarks>
        </member>
        <member name="P:MQ2DotNet.MQ2API.MQ2DataType.IndexedMember`2.Item(`1)">
            <summary>
            Get the member using an index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.MQ2API.MQ2DataType.IndexedMember`4">
            <summary>
            Helper class to access members with an indexer that return a different type for a different index type, e.g. spell given an int, or int given a spell name
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TIndex1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TIndex2"></typeparam>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2DataType.IndexedMember`4.#ctor(MQ2DotNet.MQ2API.MQ2DataType,System.String)">
            <summary>
            See <see cref="M:MQ2DotNet.MQ2API.MQ2DataType.IndexedMember`1.#ctor(MQ2DotNet.MQ2API.MQ2DataType,System.String)"/>
            </summary>
            <param name="owner"></param>
            <param name="name"></param>
        </member>
        <member name="P:MQ2DotNet.MQ2API.MQ2DataType.IndexedMember`4.Item(`1)">
            <summary>
            Get the member using an index of type <typeparamref name="TIndex1"/>
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:MQ2DotNet.MQ2API.MQ2DataType.IndexedMember`4.Item(`3)">
            <summary>
            Get the member using an index of the <typeparamref name="TIndex2"/>
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.MQ2API.MQ2DataType.IndexedStringMember`1">
            <summary>
            Helper class to access members with an indexer that return a string type
            </summary>
            <typeparam name="TIndex"></typeparam>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2DataType.IndexedStringMember`1.#ctor(MQ2DotNet.MQ2API.MQ2DataType,System.String)">
            <summary>
            See <see cref="M:MQ2DotNet.MQ2API.MQ2DataType.IndexedMember`1.#ctor(MQ2DotNet.MQ2API.MQ2DataType,System.String)"/>
            </summary>
            <param name="owner"></param>
            <param name="name"></param>
        </member>
        <member name="P:MQ2DotNet.MQ2API.MQ2DataType.IndexedStringMember`1.Item(`0)">
            <summary>
            Get the member using an index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.MQ2API.MQ2DataType.IndexedStringMember`3">
            <summary>
            Helper class to access members with an indexer that returns a string for one index type and something else for another, e.g. string given an int, or int given a string
            </summary>
            <typeparam name="TIndex"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TIndex2"></typeparam>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2DataType.IndexedStringMember`3.#ctor(MQ2DotNet.MQ2API.MQ2DataType,System.String)">
            <summary>
            See <see cref="M:MQ2DotNet.MQ2API.MQ2DataType.IndexedMember`1.#ctor(MQ2DotNet.MQ2API.MQ2DataType,System.String)"/>
            </summary>
            <param name="owner"></param>
            <param name="name"></param>
        </member>
        <member name="P:MQ2DotNet.MQ2API.MQ2DataType.IndexedStringMember`3.Item(`0)">
            <summary>
            Get the member using an index of type <typeparamref name="TIndex"/>
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:MQ2DotNet.MQ2API.MQ2DataType.IndexedStringMember`3.Item(`2)">
            <summary>
            Get the member using an index of the <typeparamref name="TIndex2"/>
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.MQ2API.MQ2DataType.IndexedMember`1">
            <summary>
            Helper class to access a member with an indexer, where the indexer is a string
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2DataType.IndexedMember`1.#ctor(MQ2DotNet.MQ2API.MQ2DataType,System.String)">
            <summary>
            See <see cref="M:MQ2DotNet.MQ2API.MQ2DataType.IndexedMember`1.#ctor(MQ2DotNet.MQ2API.MQ2DataType,System.String)"/>
            </summary>
            <param name="owner"></param>
            <param name="name"></param>
        </member>
        <member name="T:MQ2DotNet.MQ2API.MQ2TypeFactory">
            <summary>
            Creates a wrapper class from an MQ2TypeVar
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2TypeFactory.#ctor">
            <summary>
            Create a new MQ2TypeFactory that can create any loaded types with an MQ2Type attribute
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2TypeFactory.Create(MQ2DotNet.MQ2API.MQ2TypeVar)">
            <summary>
            Create the appropriate wrapper type given an MQ2TypeVar
            </summary>
            <param name="typeVar"></param>
            <returns></returns>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2TypeFactory.Register(System.String,System.Func{MQ2DotNet.MQ2API.MQ2TypeFactory,MQ2DotNet.MQ2API.MQ2TypeVar,MQ2DotNet.MQ2API.MQ2DataType})">
            <summary>
            Register a type
            </summary>
            <param name="typeName"></param>
            <param name="constructor"></param>
        </member>
        <member name="T:MQ2DotNet.MQ2API.MQ2TypeVar">
            <summary>
            Used by MQ2 to represent a variable. Consists of a type component, pType, that points to an instance of MQ2Type, and a data component, VarPtr, that stores data for this variable
            </summary>
        </member>
        <member name="M:MQ2DotNet.MQ2API.MQ2TypeVar.ToString">
            <inheritdoc />
        </member>
        <member name="T:MQ2DotNet.MQ2API.MQ2VarPtr">
            <summary>
            Data component of an MQ2 variable
            </summary>
        </member>
        <member name="M:MQ2DotNet.Program.ProgramAppDomain.Load(System.String,System.String)">
            <summary>
            Loads a new .NET program from the specified assembly file, in a new app domain
            </summary>
            <param name="assemblyFilePath"></param>
            <param name="appDomainName"></param>
        </member>
        <member name="T:MQ2DotNet.Program.IProgram">
            <summary>
            Interface which a program must implement
            </summary>
        </member>
        <member name="M:MQ2DotNet.Program.IProgram.Main(System.Threading.CancellationToken,System.String[])">
            <summary>
            Entry point of the program
            </summary>
            <param name="token"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.Utility.TaskExtensions">
            <summary>
            Extension methods for <see cref="T:System.Threading.Tasks.Task"/> and <see cref="T:System.Threading.Tasks.Task`1"/>
            </summary>
        </member>
        <member name="M:MQ2DotNet.Utility.TaskExtensions.TimeoutAfter(System.Threading.Tasks.Task,System.TimeSpan,System.Threading.CancellationTokenSource)">
            <summary>
            Wait for the task to complete with a timeout. If the timeout elapses, the task is cancelled and a <see cref="T:System.TimeoutException"/> thrown
            </summary>
            <param name="task">The task to wait for</param>
            <param name="timeout">The time to timeout after</param>
            <param name="cts">A CancellationTokenSource that can be used to cancel <paramref name="task"/></param>
            <returns>The returned task will complete when either the supplied task completes, or the timeout elapses</returns>
        </member>
        <member name="M:MQ2DotNet.Utility.TaskExtensions.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.TimeSpan,System.Threading.CancellationTokenSource)">
            <summary>
            Wait for the task to complete with a timeout. If the timeout elapses, the task is cancelled and a <see cref="T:System.TimeoutException"/> thrown
            </summary>
            <param name="task">The task to wait for</param>
            <param name="timeout">The time to timeout after</param>
            <param name="cts">A CancellationTokenSource that can be used to cancel <paramref name="task"/></param>
            <returns>The returned task will complete when either the supplied task completes, or the timeout elapses</returns>
        </member>
        <member name="M:MQ2DotNet.Utility.TaskExtensions.TimeoutAfter(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>
            Wait for the task to complete with a timeout. If the timeout elapses, the task is cancelled and a <see cref="T:System.TimeoutException"/> thrown
            </summary>
            <param name="task">The task to wait for</param>
            <param name="timeout">The time to timeout after</param>
            <returns>The returned task will complete when either the supplied task completes, or the timeout elapses</returns>
            <remarks><paramref name="task"/> will not be cancelled or awaited if the timeout elapsed, so will be left dangling. Using <see cref="M:MQ2DotNet.Utility.TaskExtensions.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.TimeSpan,System.Threading.CancellationTokenSource)"/> is preferred</remarks>
        </member>
        <member name="M:MQ2DotNet.Utility.TaskExtensions.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            Wait for the task to complete with a timeout. If the timeout elapses, the task is cancelled and a <see cref="T:System.TimeoutException"/> thrown
            </summary>
            <param name="task">The task to wait for</param>
            <param name="timeout">The time to timeout after</param>
            <returns>The returned task will complete when either the supplied task completes, or the timeout elapses</returns>
            <remarks><paramref name="task"/> will not be cancelled or awaited if the timeout elapsed, so will be left dangling. Using <see cref="M:MQ2DotNet.Utility.TaskExtensions.TimeoutAfter(System.Threading.Tasks.Task,System.TimeSpan,System.Threading.CancellationTokenSource)"/> is preferred</remarks>
        </member>
        <member name="T:MQ2DotNet.Utility.EventLoopContext">
            <summary>
            Synchronization context that will run all continuations when DoEvents is called, intended for use with an event loop
            Not threadsafe, except for Post
            </summary>
        </member>
        <member name="M:MQ2DotNet.Utility.EventLoopContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MQ2DotNet.Utility.EventLoopContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:MQ2DotNet.Utility.EventLoopContext.DoEvents(System.Boolean)">
            <summary>
            Invoke all queued continuations
            </summary>
            <param name="setSyncContext">
            If true, continuations will be invoked on this synchronization context. If false, they will be invoked on SynchronizationContext.Current
            </param>
        </member>
        <member name="M:MQ2DotNet.Utility.EventLoopContext.SetExecuteRestore(System.Action)">
            <summary>
            Helper method to invoke an action on the sync context, restoring the original context after completion or on exception
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MQ2DotNet.Utility.EventLoopContext.SetExecuteRestore``1(System.Func{``0})">
            <summary>
            Helper method to invoke an action on the sync context, restoring the original context after completion or on exception
            </summary>
        </member>
        <member name="M:MQ2DotNet.Utility.EventLoopContext.RemoveAll">
            <summary>
            Remove all queued continuations
            </summary>
            <returns></returns>
        </member>
        <member name="T:MQ2DotNet.PluginStub">
            <summary>
            Class containing functions for MQ2DotNetLoader to call from the regular plugin callbacks
            </summary>
        </member>
        <member name="F:MQ2DotNet.PluginStub._eventLoopContext">
            <summary>
            Synchronization context that runs all continuations in OnPulse
            </summary>
            <remarks>Only used for async commands, of which we have none. It's here because it's required by Commands.</remarks>
        </member>
        <member name="F:MQ2DotNet.PluginStub._commands">
            <summary>
            Service for adding commands
            </summary>
        </member>
        <member name="M:MQ2DotNet.PluginStub.InitializePlugin(System.String)">
            <summary>
            Entrypoint, called by MQ2DotNetLoader
            Entrypoint, called by MQ2DotNetLoader
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
    </members>
</doc>
